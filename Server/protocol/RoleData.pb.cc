// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RoleData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace roledata {

namespace {

const ::google::protobuf::Descriptor* PBRoleTotalInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRoleTotalInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRoleBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRoleBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBHeroList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBHeroList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBRoleBag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBRoleBag_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBattleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBattleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBBattleGateList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBBattleGateList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RoleData_2eproto() {
  protobuf_AddDesc_RoleData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RoleData.proto");
  GOOGLE_CHECK(file != NULL);
  PBRoleTotalInfo_descriptor_ = file->message_type(0);
  static const int PBRoleTotalInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleTotalInfo, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleTotalInfo, baginfo_),
  };
  PBRoleTotalInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRoleTotalInfo_descriptor_,
      PBRoleTotalInfo::default_instance_,
      PBRoleTotalInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleTotalInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleTotalInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRoleTotalInfo));
  PBRoleBaseInfo_descriptor_ = file->message_type(1);
  static const int PBRoleBaseInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleBaseInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleBaseInfo, dataversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleBaseInfo, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleBaseInfo, ptname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleBaseInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleBaseInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleBaseInfo, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleBaseInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleBaseInfo, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleBaseInfo, herolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleBaseInfo, battlegatelist_),
  };
  PBRoleBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRoleBaseInfo_descriptor_,
      PBRoleBaseInfo::default_instance_,
      PBRoleBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRoleBaseInfo));
  PBEquip_descriptor_ = file->message_type(2);
  static const int PBEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquip, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquip, equipnum_),
  };
  PBEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBEquip_descriptor_,
      PBEquip::default_instance_,
      PBEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBEquip));
  PBHero_descriptor_ = file->message_type(3);
  static const int PBHero_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHero, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHero, herouuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHero, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHero, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHero, herorank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHero, upgradelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHero, fragmentnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHero, equips_),
  };
  PBHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBHero_descriptor_,
      PBHero::default_instance_,
      PBHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBHero));
  PBHeroList_descriptor_ = file->message_type(4);
  static const int PBHeroList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHeroList, heros_),
  };
  PBHeroList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBHeroList_descriptor_,
      PBHeroList::default_instance_,
      PBHeroList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHeroList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBHeroList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBHeroList));
  PBRoleBag_descriptor_ = file->message_type(5);
  static const int PBRoleBag_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleBag, equips_),
  };
  PBRoleBag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBRoleBag_descriptor_,
      PBRoleBag::default_instance_,
      PBRoleBag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleBag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBRoleBag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBRoleBag));
  PBGateInfo_descriptor_ = file->message_type(6);
  static const int PBGateInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGateInfo, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGateInfo, gatestar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGateInfo, hasfight_),
  };
  PBGateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGateInfo_descriptor_,
      PBGateInfo::default_instance_,
      PBGateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGateInfo));
  PBBattleInfo_descriptor_ = file->message_type(7);
  static const int PBBattleInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleInfo, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleInfo, gates_),
  };
  PBBattleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBattleInfo_descriptor_,
      PBBattleInfo::default_instance_,
      PBBattleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBattleInfo));
  PBBattleGateList_descriptor_ = file->message_type(8);
  static const int PBBattleGateList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleGateList, battlegates_),
  };
  PBBattleGateList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBBattleGateList_descriptor_,
      PBBattleGateList::default_instance_,
      PBBattleGateList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleGateList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBBattleGateList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBBattleGateList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RoleData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRoleTotalInfo_descriptor_, &PBRoleTotalInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRoleBaseInfo_descriptor_, &PBRoleBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBEquip_descriptor_, &PBEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBHero_descriptor_, &PBHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBHeroList_descriptor_, &PBHeroList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBRoleBag_descriptor_, &PBRoleBag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGateInfo_descriptor_, &PBGateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBattleInfo_descriptor_, &PBBattleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBBattleGateList_descriptor_, &PBBattleGateList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RoleData_2eproto() {
  delete PBRoleTotalInfo::default_instance_;
  delete PBRoleTotalInfo_reflection_;
  delete PBRoleBaseInfo::default_instance_;
  delete PBRoleBaseInfo_reflection_;
  delete PBEquip::default_instance_;
  delete PBEquip_reflection_;
  delete PBHero::default_instance_;
  delete PBHero_reflection_;
  delete PBHeroList::default_instance_;
  delete PBHeroList_reflection_;
  delete PBRoleBag::default_instance_;
  delete PBRoleBag_reflection_;
  delete PBGateInfo::default_instance_;
  delete PBGateInfo_reflection_;
  delete PBBattleInfo::default_instance_;
  delete PBBattleInfo_reflection_;
  delete PBBattleGateList::default_instance_;
  delete PBBattleGateList_reflection_;
}

void protobuf_AddDesc_RoleData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016RoleData.proto\022\010roledata\"c\n\017PBRoleTota"
    "lInfo\022*\n\010baseInfo\030\001 \001(\0132\030.roledata.PBRol"
    "eBaseInfo\022$\n\007bagInfo\030\002 \001(\0132\023.roledata.PB"
    "RoleBag\"\200\002\n\016PBRoleBaseInfo\022\016\n\006userId\030\001 \001"
    "(\r\022\023\n\013dataVersion\030\002 \001(\r\022\020\n\010roleName\030\003 \001("
    "\t\022\016\n\006ptName\030\004 \001(\t\022\r\n\005level\030\005 \001(\r\022\013\n\003exp\030"
    "\006 \001(\r\022\017\n\007diamond\030\007 \001(\r\022\014\n\004gold\030\010 \001(\r\022\020\n\010"
    "vipLevel\030\t \001(\r\022&\n\010heroList\030\n \001(\0132\024.roled"
    "ata.PBHeroList\0222\n\016battleGateList\030\013 \001(\0132\032"
    ".roledata.PBBattleGateList\",\n\007PBEquip\022\017\n"
    "\007equipId\030\001 \001(\r\022\020\n\010equipNum\030\003 \001(\r\"\246\001\n\006PBH"
    "ero\022\016\n\006heroId\030\001 \001(\r\022\020\n\010heroUUID\030\002 \001(\004\022\r\n"
    "\005level\030\003 \001(\r\022\013\n\003exp\030\004 \001(\r\022\020\n\010heroRank\030\005 "
    "\001(\r\022\024\n\014upgradeLevel\030\006 \001(\r\022\023\n\013fragmentNum"
    "\030\007 \001(\r\022!\n\006equips\030\010 \003(\0132\021.roledata.PBEqui"
    "p\"-\n\nPBHeroList\022\037\n\005heros\030\001 \003(\0132\020.roledat"
    "a.PBHero\".\n\tPBRoleBag\022!\n\006equips\030\001 \003(\0132\021."
    "roledata.PBEquip\"@\n\nPBGateInfo\022\016\n\006gateId"
    "\030\001 \001(\r\022\020\n\010gateStar\030\002 \001(\r\022\020\n\010hasFight\030\003 \001"
    "(\010\"E\n\014PBBattleInfo\022\020\n\010battleId\030\001 \001(\r\022#\n\005"
    "gates\030\002 \003(\0132\024.roledata.PBGateInfo\"\?\n\020PBB"
    "attleGateList\022+\n\013battleGates\030\001 \003(\0132\026.rol"
    "edata.PBBattleInfo", 898);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RoleData.proto", &protobuf_RegisterTypes);
  PBRoleTotalInfo::default_instance_ = new PBRoleTotalInfo();
  PBRoleBaseInfo::default_instance_ = new PBRoleBaseInfo();
  PBEquip::default_instance_ = new PBEquip();
  PBHero::default_instance_ = new PBHero();
  PBHeroList::default_instance_ = new PBHeroList();
  PBRoleBag::default_instance_ = new PBRoleBag();
  PBGateInfo::default_instance_ = new PBGateInfo();
  PBBattleInfo::default_instance_ = new PBBattleInfo();
  PBBattleGateList::default_instance_ = new PBBattleGateList();
  PBRoleTotalInfo::default_instance_->InitAsDefaultInstance();
  PBRoleBaseInfo::default_instance_->InitAsDefaultInstance();
  PBEquip::default_instance_->InitAsDefaultInstance();
  PBHero::default_instance_->InitAsDefaultInstance();
  PBHeroList::default_instance_->InitAsDefaultInstance();
  PBRoleBag::default_instance_->InitAsDefaultInstance();
  PBGateInfo::default_instance_->InitAsDefaultInstance();
  PBBattleInfo::default_instance_->InitAsDefaultInstance();
  PBBattleGateList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RoleData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RoleData_2eproto {
  StaticDescriptorInitializer_RoleData_2eproto() {
    protobuf_AddDesc_RoleData_2eproto();
  }
} static_descriptor_initializer_RoleData_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PBRoleTotalInfo::kBaseInfoFieldNumber;
const int PBRoleTotalInfo::kBagInfoFieldNumber;
#endif  // !_MSC_VER

PBRoleTotalInfo::PBRoleTotalInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRoleTotalInfo::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::roledata::PBRoleBaseInfo*>(&::roledata::PBRoleBaseInfo::default_instance());
  baginfo_ = const_cast< ::roledata::PBRoleBag*>(&::roledata::PBRoleBag::default_instance());
}

PBRoleTotalInfo::PBRoleTotalInfo(const PBRoleTotalInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRoleTotalInfo::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  baginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRoleTotalInfo::~PBRoleTotalInfo() {
  SharedDtor();
}

void PBRoleTotalInfo::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
    delete baginfo_;
  }
}

void PBRoleTotalInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRoleTotalInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRoleTotalInfo_descriptor_;
}

const PBRoleTotalInfo& PBRoleTotalInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RoleData_2eproto();  return *default_instance_;
}

PBRoleTotalInfo* PBRoleTotalInfo::default_instance_ = NULL;

PBRoleTotalInfo* PBRoleTotalInfo::New() const {
  return new PBRoleTotalInfo;
}

void PBRoleTotalInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::roledata::PBRoleBaseInfo::Clear();
    }
    if (has_baginfo()) {
      if (baginfo_ != NULL) baginfo_->::roledata::PBRoleBag::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRoleTotalInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .roledata.PBRoleBaseInfo baseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bagInfo;
        break;
      }
      
      // optional .roledata.PBRoleBag bagInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bagInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRoleTotalInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .roledata.PBRoleBaseInfo baseInfo = 1;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseinfo(), output);
  }
  
  // optional .roledata.PBRoleBag bagInfo = 2;
  if (has_baginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->baginfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRoleTotalInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .roledata.PBRoleBaseInfo baseInfo = 1;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseinfo(), target);
  }
  
  // optional .roledata.PBRoleBag bagInfo = 2;
  if (has_baginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->baginfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRoleTotalInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .roledata.PBRoleBaseInfo baseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // optional .roledata.PBRoleBag bagInfo = 2;
    if (has_baginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baginfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRoleTotalInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRoleTotalInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRoleTotalInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRoleTotalInfo::MergeFrom(const PBRoleTotalInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::roledata::PBRoleBaseInfo::MergeFrom(from.baseinfo());
    }
    if (from.has_baginfo()) {
      mutable_baginfo()->::roledata::PBRoleBag::MergeFrom(from.baginfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRoleTotalInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRoleTotalInfo::CopyFrom(const PBRoleTotalInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRoleTotalInfo::IsInitialized() const {
  
  return true;
}

void PBRoleTotalInfo::Swap(PBRoleTotalInfo* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(baginfo_, other->baginfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRoleTotalInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRoleTotalInfo_descriptor_;
  metadata.reflection = PBRoleTotalInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBRoleBaseInfo::kUserIdFieldNumber;
const int PBRoleBaseInfo::kDataVersionFieldNumber;
const int PBRoleBaseInfo::kRoleNameFieldNumber;
const int PBRoleBaseInfo::kPtNameFieldNumber;
const int PBRoleBaseInfo::kLevelFieldNumber;
const int PBRoleBaseInfo::kExpFieldNumber;
const int PBRoleBaseInfo::kDiamondFieldNumber;
const int PBRoleBaseInfo::kGoldFieldNumber;
const int PBRoleBaseInfo::kVipLevelFieldNumber;
const int PBRoleBaseInfo::kHeroListFieldNumber;
const int PBRoleBaseInfo::kBattleGateListFieldNumber;
#endif  // !_MSC_VER

PBRoleBaseInfo::PBRoleBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRoleBaseInfo::InitAsDefaultInstance() {
  herolist_ = const_cast< ::roledata::PBHeroList*>(&::roledata::PBHeroList::default_instance());
  battlegatelist_ = const_cast< ::roledata::PBBattleGateList*>(&::roledata::PBBattleGateList::default_instance());
}

PBRoleBaseInfo::PBRoleBaseInfo(const PBRoleBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRoleBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  dataversion_ = 0u;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ptname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  exp_ = 0u;
  diamond_ = 0u;
  gold_ = 0u;
  viplevel_ = 0u;
  herolist_ = NULL;
  battlegatelist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRoleBaseInfo::~PBRoleBaseInfo() {
  SharedDtor();
}

void PBRoleBaseInfo::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (ptname_ != &::google::protobuf::internal::kEmptyString) {
    delete ptname_;
  }
  if (this != default_instance_) {
    delete herolist_;
    delete battlegatelist_;
  }
}

void PBRoleBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRoleBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRoleBaseInfo_descriptor_;
}

const PBRoleBaseInfo& PBRoleBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RoleData_2eproto();  return *default_instance_;
}

PBRoleBaseInfo* PBRoleBaseInfo::default_instance_ = NULL;

PBRoleBaseInfo* PBRoleBaseInfo::New() const {
  return new PBRoleBaseInfo;
}

void PBRoleBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    dataversion_ = 0u;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    if (has_ptname()) {
      if (ptname_ != &::google::protobuf::internal::kEmptyString) {
        ptname_->clear();
      }
    }
    level_ = 0u;
    exp_ = 0u;
    diamond_ = 0u;
    gold_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    viplevel_ = 0u;
    if (has_herolist()) {
      if (herolist_ != NULL) herolist_->::roledata::PBHeroList::Clear();
    }
    if (has_battlegatelist()) {
      if (battlegatelist_ != NULL) battlegatelist_->::roledata::PBBattleGateList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRoleBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dataVersion;
        break;
      }
      
      // optional uint32 dataVersion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dataversion_)));
          set_has_dataversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_roleName;
        break;
      }
      
      // optional string roleName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ptName;
        break;
      }
      
      // optional string ptName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ptName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ptname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ptname().data(), this->ptname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_exp;
        break;
      }
      
      // optional uint32 exp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_diamond;
        break;
      }
      
      // optional uint32 diamond = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gold;
        break;
      }
      
      // optional uint32 gold = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_vipLevel;
        break;
      }
      
      // optional uint32 vipLevel = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_heroList;
        break;
      }
      
      // optional .roledata.PBHeroList heroList = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heroList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_herolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_battleGateList;
        break;
      }
      
      // optional .roledata.PBBattleGateList battleGateList = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battleGateList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battlegatelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRoleBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // optional uint32 dataVersion = 2;
  if (has_dataversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dataversion(), output);
  }
  
  // optional string roleName = 3;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->rolename(), output);
  }
  
  // optional string ptName = 4;
  if (has_ptname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ptname().data(), this->ptname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ptname(), output);
  }
  
  // optional uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }
  
  // optional uint32 exp = 6;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->exp(), output);
  }
  
  // optional uint32 diamond = 7;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->diamond(), output);
  }
  
  // optional uint32 gold = 8;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->gold(), output);
  }
  
  // optional uint32 vipLevel = 9;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->viplevel(), output);
  }
  
  // optional .roledata.PBHeroList heroList = 10;
  if (has_herolist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->herolist(), output);
  }
  
  // optional .roledata.PBBattleGateList battleGateList = 11;
  if (has_battlegatelist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->battlegatelist(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRoleBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 userId = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // optional uint32 dataVersion = 2;
  if (has_dataversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dataversion(), target);
  }
  
  // optional string roleName = 3;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rolename(), target);
  }
  
  // optional string ptName = 4;
  if (has_ptname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ptname().data(), this->ptname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ptname(), target);
  }
  
  // optional uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }
  
  // optional uint32 exp = 6;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->exp(), target);
  }
  
  // optional uint32 diamond = 7;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->diamond(), target);
  }
  
  // optional uint32 gold = 8;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->gold(), target);
  }
  
  // optional uint32 vipLevel = 9;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->viplevel(), target);
  }
  
  // optional .roledata.PBHeroList heroList = 10;
  if (has_herolist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->herolist(), target);
  }
  
  // optional .roledata.PBBattleGateList battleGateList = 11;
  if (has_battlegatelist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->battlegatelist(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRoleBaseInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // optional uint32 dataVersion = 2;
    if (has_dataversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dataversion());
    }
    
    // optional string roleName = 3;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
    // optional string ptName = 4;
    if (has_ptname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ptname());
    }
    
    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional uint32 exp = 6;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }
    
    // optional uint32 diamond = 7;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }
    
    // optional uint32 gold = 8;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 vipLevel = 9;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }
    
    // optional .roledata.PBHeroList heroList = 10;
    if (has_herolist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->herolist());
    }
    
    // optional .roledata.PBBattleGateList battleGateList = 11;
    if (has_battlegatelist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battlegatelist());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRoleBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRoleBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRoleBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRoleBaseInfo::MergeFrom(const PBRoleBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_dataversion()) {
      set_dataversion(from.dataversion());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_ptname()) {
      set_ptname(from.ptname());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_herolist()) {
      mutable_herolist()->::roledata::PBHeroList::MergeFrom(from.herolist());
    }
    if (from.has_battlegatelist()) {
      mutable_battlegatelist()->::roledata::PBBattleGateList::MergeFrom(from.battlegatelist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRoleBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRoleBaseInfo::CopyFrom(const PBRoleBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRoleBaseInfo::IsInitialized() const {
  
  return true;
}

void PBRoleBaseInfo::Swap(PBRoleBaseInfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(dataversion_, other->dataversion_);
    std::swap(rolename_, other->rolename_);
    std::swap(ptname_, other->ptname_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(diamond_, other->diamond_);
    std::swap(gold_, other->gold_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(herolist_, other->herolist_);
    std::swap(battlegatelist_, other->battlegatelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRoleBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRoleBaseInfo_descriptor_;
  metadata.reflection = PBRoleBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBEquip::kEquipIdFieldNumber;
const int PBEquip::kEquipNumFieldNumber;
#endif  // !_MSC_VER

PBEquip::PBEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBEquip::InitAsDefaultInstance() {
}

PBEquip::PBEquip(const PBEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBEquip::SharedCtor() {
  _cached_size_ = 0;
  equipid_ = 0u;
  equipnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBEquip::~PBEquip() {
  SharedDtor();
}

void PBEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBEquip_descriptor_;
}

const PBEquip& PBEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RoleData_2eproto();  return *default_instance_;
}

PBEquip* PBEquip::default_instance_ = NULL;

PBEquip* PBEquip::New() const {
  return new PBEquip;
}

void PBEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equipid_ = 0u;
    equipnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 equipId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equipNum;
        break;
      }
      
      // optional uint32 equipNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipnum_)));
          set_has_equipnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 equipId = 1;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->equipid(), output);
  }
  
  // optional uint32 equipNum = 3;
  if (has_equipnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->equipnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 equipId = 1;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->equipid(), target);
  }
  
  // optional uint32 equipNum = 3;
  if (has_equipnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->equipnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBEquip::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 equipId = 1;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipid());
    }
    
    // optional uint32 equipNum = 3;
    if (has_equipnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipnum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBEquip::MergeFrom(const PBEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
    if (from.has_equipnum()) {
      set_equipnum(from.equipnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBEquip::CopyFrom(const PBEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBEquip::IsInitialized() const {
  
  return true;
}

void PBEquip::Swap(PBEquip* other) {
  if (other != this) {
    std::swap(equipid_, other->equipid_);
    std::swap(equipnum_, other->equipnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBEquip_descriptor_;
  metadata.reflection = PBEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBHero::kHeroIdFieldNumber;
const int PBHero::kHeroUUIDFieldNumber;
const int PBHero::kLevelFieldNumber;
const int PBHero::kExpFieldNumber;
const int PBHero::kHeroRankFieldNumber;
const int PBHero::kUpgradeLevelFieldNumber;
const int PBHero::kFragmentNumFieldNumber;
const int PBHero::kEquipsFieldNumber;
#endif  // !_MSC_VER

PBHero::PBHero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBHero::InitAsDefaultInstance() {
}

PBHero::PBHero(const PBHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBHero::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  herouuid_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  exp_ = 0u;
  herorank_ = 0u;
  upgradelevel_ = 0u;
  fragmentnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBHero::~PBHero() {
  SharedDtor();
}

void PBHero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBHero_descriptor_;
}

const PBHero& PBHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RoleData_2eproto();  return *default_instance_;
}

PBHero* PBHero::default_instance_ = NULL;

PBHero* PBHero::New() const {
  return new PBHero;
}

void PBHero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    herouuid_ = GOOGLE_ULONGLONG(0);
    level_ = 0u;
    exp_ = 0u;
    herorank_ = 0u;
    upgradelevel_ = 0u;
    fragmentnum_ = 0u;
  }
  equips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heroUUID;
        break;
      }
      
      // optional uint64 heroUUID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroUUID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &herouuid_)));
          set_has_herouuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }
      
      // optional uint32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_heroRank;
        break;
      }
      
      // optional uint32 heroRank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &herorank_)));
          set_has_herorank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_upgradeLevel;
        break;
      }
      
      // optional uint32 upgradeLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgradeLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upgradelevel_)));
          set_has_upgradelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fragmentNum;
        break;
      }
      
      // optional uint32 fragmentNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fragmentNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fragmentnum_)));
          set_has_fragmentnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_equips;
        break;
      }
      
      // repeated .roledata.PBEquip equips = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_equips;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroId = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }
  
  // optional uint64 heroUUID = 2;
  if (has_herouuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->herouuid(), output);
  }
  
  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }
  
  // optional uint32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp(), output);
  }
  
  // optional uint32 heroRank = 5;
  if (has_herorank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->herorank(), output);
  }
  
  // optional uint32 upgradeLevel = 6;
  if (has_upgradelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->upgradelevel(), output);
  }
  
  // optional uint32 fragmentNum = 7;
  if (has_fragmentnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->fragmentnum(), output);
  }
  
  // repeated .roledata.PBEquip equips = 8;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->equips(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroId = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }
  
  // optional uint64 heroUUID = 2;
  if (has_herouuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->herouuid(), target);
  }
  
  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }
  
  // optional uint32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exp(), target);
  }
  
  // optional uint32 heroRank = 5;
  if (has_herorank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->herorank(), target);
  }
  
  // optional uint32 upgradeLevel = 6;
  if (has_upgradelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->upgradelevel(), target);
  }
  
  // optional uint32 fragmentNum = 7;
  if (has_fragmentnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->fragmentnum(), target);
  }
  
  // repeated .roledata.PBEquip equips = 8;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->equips(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBHero::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroId = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }
    
    // optional uint64 heroUUID = 2;
    if (has_herouuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->herouuid());
    }
    
    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // optional uint32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }
    
    // optional uint32 heroRank = 5;
    if (has_herorank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->herorank());
    }
    
    // optional uint32 upgradeLevel = 6;
    if (has_upgradelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upgradelevel());
    }
    
    // optional uint32 fragmentNum = 7;
    if (has_fragmentnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fragmentnum());
    }
    
  }
  // repeated .roledata.PBEquip equips = 8;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBHero::MergeFrom(const PBHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_.MergeFrom(from.equips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_herouuid()) {
      set_herouuid(from.herouuid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_herorank()) {
      set_herorank(from.herorank());
    }
    if (from.has_upgradelevel()) {
      set_upgradelevel(from.upgradelevel());
    }
    if (from.has_fragmentnum()) {
      set_fragmentnum(from.fragmentnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBHero::CopyFrom(const PBHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBHero::IsInitialized() const {
  
  return true;
}

void PBHero::Swap(PBHero* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(herouuid_, other->herouuid_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(herorank_, other->herorank_);
    std::swap(upgradelevel_, other->upgradelevel_);
    std::swap(fragmentnum_, other->fragmentnum_);
    equips_.Swap(&other->equips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBHero_descriptor_;
  metadata.reflection = PBHero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBHeroList::kHerosFieldNumber;
#endif  // !_MSC_VER

PBHeroList::PBHeroList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBHeroList::InitAsDefaultInstance() {
}

PBHeroList::PBHeroList(const PBHeroList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBHeroList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBHeroList::~PBHeroList() {
  SharedDtor();
}

void PBHeroList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBHeroList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBHeroList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBHeroList_descriptor_;
}

const PBHeroList& PBHeroList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RoleData_2eproto();  return *default_instance_;
}

PBHeroList* PBHeroList::default_instance_ = NULL;

PBHeroList* PBHeroList::New() const {
  return new PBHeroList;
}

void PBHeroList::Clear() {
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBHeroList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .roledata.PBHero heros = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heros:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heros()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_heros;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBHeroList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .roledata.PBHero heros = 1;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->heros(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBHeroList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .roledata.PBHero heros = 1;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->heros(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBHeroList::ByteSize() const {
  int total_size = 0;
  
  // repeated .roledata.PBHero heros = 1;
  total_size += 1 * this->heros_size();
  for (int i = 0; i < this->heros_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heros(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBHeroList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBHeroList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBHeroList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBHeroList::MergeFrom(const PBHeroList& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBHeroList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBHeroList::CopyFrom(const PBHeroList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBHeroList::IsInitialized() const {
  
  return true;
}

void PBHeroList::Swap(PBHeroList* other) {
  if (other != this) {
    heros_.Swap(&other->heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBHeroList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBHeroList_descriptor_;
  metadata.reflection = PBHeroList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBRoleBag::kEquipsFieldNumber;
#endif  // !_MSC_VER

PBRoleBag::PBRoleBag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBRoleBag::InitAsDefaultInstance() {
}

PBRoleBag::PBRoleBag(const PBRoleBag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBRoleBag::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBRoleBag::~PBRoleBag() {
  SharedDtor();
}

void PBRoleBag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBRoleBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBRoleBag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBRoleBag_descriptor_;
}

const PBRoleBag& PBRoleBag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RoleData_2eproto();  return *default_instance_;
}

PBRoleBag* PBRoleBag::default_instance_ = NULL;

PBRoleBag* PBRoleBag::New() const {
  return new PBRoleBag;
}

void PBRoleBag::Clear() {
  equips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBRoleBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .roledata.PBEquip equips = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equips;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBRoleBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .roledata.PBEquip equips = 1;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equips(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBRoleBag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .roledata.PBEquip equips = 1;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equips(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBRoleBag::ByteSize() const {
  int total_size = 0;
  
  // repeated .roledata.PBEquip equips = 1;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBRoleBag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBRoleBag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBRoleBag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBRoleBag::MergeFrom(const PBRoleBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_.MergeFrom(from.equips_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBRoleBag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBRoleBag::CopyFrom(const PBRoleBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBRoleBag::IsInitialized() const {
  
  return true;
}

void PBRoleBag::Swap(PBRoleBag* other) {
  if (other != this) {
    equips_.Swap(&other->equips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBRoleBag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBRoleBag_descriptor_;
  metadata.reflection = PBRoleBag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGateInfo::kGateIdFieldNumber;
const int PBGateInfo::kGateStarFieldNumber;
const int PBGateInfo::kHasFightFieldNumber;
#endif  // !_MSC_VER

PBGateInfo::PBGateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGateInfo::InitAsDefaultInstance() {
}

PBGateInfo::PBGateInfo(const PBGateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGateInfo::SharedCtor() {
  _cached_size_ = 0;
  gateid_ = 0u;
  gatestar_ = 0u;
  hasfight_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGateInfo::~PBGateInfo() {
  SharedDtor();
}

void PBGateInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBGateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGateInfo_descriptor_;
}

const PBGateInfo& PBGateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RoleData_2eproto();  return *default_instance_;
}

PBGateInfo* PBGateInfo::default_instance_ = NULL;

PBGateInfo* PBGateInfo::New() const {
  return new PBGateInfo;
}

void PBGateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gateid_ = 0u;
    gatestar_ = 0u;
    hasfight_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gateId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gateStar;
        break;
      }
      
      // optional uint32 gateStar = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gatestar_)));
          set_has_gatestar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hasFight;
        break;
      }
      
      // optional bool hasFight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasFight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasfight_)));
          set_has_hasfight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 gateId = 1;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gateid(), output);
  }
  
  // optional uint32 gateStar = 2;
  if (has_gatestar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gatestar(), output);
  }
  
  // optional bool hasFight = 3;
  if (has_hasfight()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->hasfight(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 gateId = 1;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gateid(), target);
  }
  
  // optional uint32 gateStar = 2;
  if (has_gatestar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gatestar(), target);
  }
  
  // optional bool hasFight = 3;
  if (has_hasfight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->hasfight(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGateInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gateId = 1;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }
    
    // optional uint32 gateStar = 2;
    if (has_gatestar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gatestar());
    }
    
    // optional bool hasFight = 3;
    if (has_hasfight()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGateInfo::MergeFrom(const PBGateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_gatestar()) {
      set_gatestar(from.gatestar());
    }
    if (from.has_hasfight()) {
      set_hasfight(from.hasfight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGateInfo::CopyFrom(const PBGateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGateInfo::IsInitialized() const {
  
  return true;
}

void PBGateInfo::Swap(PBGateInfo* other) {
  if (other != this) {
    std::swap(gateid_, other->gateid_);
    std::swap(gatestar_, other->gatestar_);
    std::swap(hasfight_, other->hasfight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGateInfo_descriptor_;
  metadata.reflection = PBGateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBattleInfo::kBattleIdFieldNumber;
const int PBBattleInfo::kGatesFieldNumber;
#endif  // !_MSC_VER

PBBattleInfo::PBBattleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBattleInfo::InitAsDefaultInstance() {
}

PBBattleInfo::PBBattleInfo(const PBBattleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBattleInfo::SharedCtor() {
  _cached_size_ = 0;
  battleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBattleInfo::~PBBattleInfo() {
  SharedDtor();
}

void PBBattleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBBattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBattleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBattleInfo_descriptor_;
}

const PBBattleInfo& PBBattleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RoleData_2eproto();  return *default_instance_;
}

PBBattleInfo* PBBattleInfo::default_instance_ = NULL;

PBBattleInfo* PBBattleInfo::New() const {
  return new PBBattleInfo;
}

void PBBattleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battleid_ = 0u;
  }
  gates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 battleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gates;
        break;
      }
      
      // repeated .roledata.PBGateInfo gates = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gates;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 battleId = 1;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->battleid(), output);
  }
  
  // repeated .roledata.PBGateInfo gates = 2;
  for (int i = 0; i < this->gates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gates(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBattleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 battleId = 1;
  if (has_battleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->battleid(), target);
  }
  
  // repeated .roledata.PBGateInfo gates = 2;
  for (int i = 0; i < this->gates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gates(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBattleInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 battleId = 1;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battleid());
    }
    
  }
  // repeated .roledata.PBGateInfo gates = 2;
  total_size += 1 * this->gates_size();
  for (int i = 0; i < this->gates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gates(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBattleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBattleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBattleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBattleInfo::MergeFrom(const PBBattleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  gates_.MergeFrom(from.gates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBattleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBattleInfo::CopyFrom(const PBBattleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBattleInfo::IsInitialized() const {
  
  return true;
}

void PBBattleInfo::Swap(PBBattleInfo* other) {
  if (other != this) {
    std::swap(battleid_, other->battleid_);
    gates_.Swap(&other->gates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBattleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBattleInfo_descriptor_;
  metadata.reflection = PBBattleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBBattleGateList::kBattleGatesFieldNumber;
#endif  // !_MSC_VER

PBBattleGateList::PBBattleGateList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBBattleGateList::InitAsDefaultInstance() {
}

PBBattleGateList::PBBattleGateList(const PBBattleGateList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBBattleGateList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBBattleGateList::~PBBattleGateList() {
  SharedDtor();
}

void PBBattleGateList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBBattleGateList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBBattleGateList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBBattleGateList_descriptor_;
}

const PBBattleGateList& PBBattleGateList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RoleData_2eproto();  return *default_instance_;
}

PBBattleGateList* PBBattleGateList::default_instance_ = NULL;

PBBattleGateList* PBBattleGateList::New() const {
  return new PBBattleGateList;
}

void PBBattleGateList::Clear() {
  battlegates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBBattleGateList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .roledata.PBBattleInfo battleGates = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battleGates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battlegates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_battleGates;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBBattleGateList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .roledata.PBBattleInfo battleGates = 1;
  for (int i = 0; i < this->battlegates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battlegates(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBBattleGateList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .roledata.PBBattleInfo battleGates = 1;
  for (int i = 0; i < this->battlegates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battlegates(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBBattleGateList::ByteSize() const {
  int total_size = 0;
  
  // repeated .roledata.PBBattleInfo battleGates = 1;
  total_size += 1 * this->battlegates_size();
  for (int i = 0; i < this->battlegates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battlegates(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBBattleGateList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBBattleGateList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBBattleGateList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBBattleGateList::MergeFrom(const PBBattleGateList& from) {
  GOOGLE_CHECK_NE(&from, this);
  battlegates_.MergeFrom(from.battlegates_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBBattleGateList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBBattleGateList::CopyFrom(const PBBattleGateList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBBattleGateList::IsInitialized() const {
  
  return true;
}

void PBBattleGateList::Swap(PBBattleGateList* other) {
  if (other != this) {
    battlegates_.Swap(&other->battlegates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBBattleGateList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBBattleGateList_descriptor_;
  metadata.reflection = PBBattleGateList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace roledata

// @@protoc_insertion_point(global_scope)
