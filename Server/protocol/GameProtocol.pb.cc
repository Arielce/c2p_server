// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ctos {

namespace {

const ::google::protobuf::Descriptor* RequestGameGroups_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestGameGroups_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBGameGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBGameGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseGameGroups_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseGameGroups_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestProcGMCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestProcGMCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestVerifyToken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestVerifyToken_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseVerifyToken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseVerifyToken_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestRoleNameList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestRoleNameList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseRoleNameList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseRoleNameList_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestCheckNameValid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestCheckNameValid_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseCheckNameValid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseCheckNameValid_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestCreateRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestCreateRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseCreateRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseCreateRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestRoleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestRoleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseRoleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseRoleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestEnterGate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestEnterGate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseEnterGate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseEnterGate_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestFinishGate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestFinishGate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseFinishiGate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseFinishiGate_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestHeroDressEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestHeroDressEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseHeroDressEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseHeroDressEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestUpgradeHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestUpgradeHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseUpgradeHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseUpgradeHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestCompoundEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestCompoundEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseCompoundEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseCompoundEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestDrawPrizeList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestDrawPrizeList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseDrawPrizeList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseDrawPrizeList_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestDrawPrize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestDrawPrize_reflection_ = NULL;
const ::google::protobuf::Descriptor* PBDrawPrize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PBDrawPrize_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseDrawPrize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseDrawPrize_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameProtocol_2eproto() {
  protobuf_AddDesc_GameProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  RequestGameGroups_descriptor_ = file->message_type(0);
  static const int RequestGameGroups_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGameGroups, clienttype_),
  };
  RequestGameGroups_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestGameGroups_descriptor_,
      RequestGameGroups::default_instance_,
      RequestGameGroups_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGameGroups, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGameGroups, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestGameGroups));
  PBGameGroup_descriptor_ = file->message_type(1);
  static const int PBGameGroup_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameGroup, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameGroup, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameGroup, index_),
  };
  PBGameGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBGameGroup_descriptor_,
      PBGameGroup::default_instance_,
      PBGameGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBGameGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBGameGroup));
  ResponseGameGroups_descriptor_ = file->message_type(2);
  static const int ResponseGameGroups_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGameGroups, groups_),
  };
  ResponseGameGroups_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseGameGroups_descriptor_,
      ResponseGameGroups::default_instance_,
      ResponseGameGroups_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGameGroups, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGameGroups, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseGameGroups));
  RequestProcGMCommand_descriptor_ = file->message_type(3);
  static const int RequestProcGMCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProcGMCommand, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProcGMCommand, command_),
  };
  RequestProcGMCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestProcGMCommand_descriptor_,
      RequestProcGMCommand::default_instance_,
      RequestProcGMCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProcGMCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestProcGMCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestProcGMCommand));
  RequestVerifyToken_descriptor_ = file->message_type(4);
  static const int RequestVerifyToken_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVerifyToken, ptname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVerifyToken, token_),
  };
  RequestVerifyToken_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestVerifyToken_descriptor_,
      RequestVerifyToken::default_instance_,
      RequestVerifyToken_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVerifyToken, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestVerifyToken, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestVerifyToken));
  ResponseVerifyToken_descriptor_ = file->message_type(5);
  static const int ResponseVerifyToken_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseVerifyToken, errcode_),
  };
  ResponseVerifyToken_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseVerifyToken_descriptor_,
      ResponseVerifyToken::default_instance_,
      ResponseVerifyToken_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseVerifyToken, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseVerifyToken, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseVerifyToken));
  RequestRoleNameList_descriptor_ = file->message_type(6);
  static const int RequestRoleNameList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRoleNameList, listnum_),
  };
  RequestRoleNameList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestRoleNameList_descriptor_,
      RequestRoleNameList::default_instance_,
      RequestRoleNameList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRoleNameList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRoleNameList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestRoleNameList));
  ResponseRoleNameList_descriptor_ = file->message_type(7);
  static const int ResponseRoleNameList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRoleNameList, namelist_),
  };
  ResponseRoleNameList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseRoleNameList_descriptor_,
      ResponseRoleNameList::default_instance_,
      ResponseRoleNameList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRoleNameList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRoleNameList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseRoleNameList));
  RequestCheckNameValid_descriptor_ = file->message_type(8);
  static const int RequestCheckNameValid_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCheckNameValid, rolename_),
  };
  RequestCheckNameValid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestCheckNameValid_descriptor_,
      RequestCheckNameValid::default_instance_,
      RequestCheckNameValid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCheckNameValid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCheckNameValid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestCheckNameValid));
  ResponseCheckNameValid_descriptor_ = file->message_type(9);
  static const int ResponseCheckNameValid_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCheckNameValid, errcode_),
  };
  ResponseCheckNameValid_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseCheckNameValid_descriptor_,
      ResponseCheckNameValid::default_instance_,
      ResponseCheckNameValid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCheckNameValid, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCheckNameValid, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseCheckNameValid));
  RequestCreateRole_descriptor_ = file->message_type(10);
  static const int RequestCreateRole_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCreateRole, ptname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCreateRole, rolename_),
  };
  RequestCreateRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestCreateRole_descriptor_,
      RequestCreateRole::default_instance_,
      RequestCreateRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCreateRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCreateRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestCreateRole));
  ResponseCreateRole_descriptor_ = file->message_type(11);
  static const int ResponseCreateRole_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCreateRole, errcode_),
  };
  ResponseCreateRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseCreateRole_descriptor_,
      ResponseCreateRole::default_instance_,
      ResponseCreateRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCreateRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCreateRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseCreateRole));
  RequestRoleData_descriptor_ = file->message_type(12);
  static const int RequestRoleData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRoleData, ptname_),
  };
  RequestRoleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestRoleData_descriptor_,
      RequestRoleData::default_instance_,
      RequestRoleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRoleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRoleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestRoleData));
  ResponseRoleData_descriptor_ = file->message_type(13);
  static const int ResponseRoleData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRoleData, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRoleData, roledata_),
  };
  ResponseRoleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseRoleData_descriptor_,
      ResponseRoleData::default_instance_,
      ResponseRoleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRoleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRoleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseRoleData));
  RequestEnterGate_descriptor_ = file->message_type(14);
  static const int RequestEnterGate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEnterGate, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEnterGate, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEnterGate, heros_),
  };
  RequestEnterGate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestEnterGate_descriptor_,
      RequestEnterGate::default_instance_,
      RequestEnterGate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEnterGate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestEnterGate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestEnterGate));
  ResponseEnterGate_descriptor_ = file->message_type(15);
  static const int ResponseEnterGate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseEnterGate, errcode_),
  };
  ResponseEnterGate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseEnterGate_descriptor_,
      ResponseEnterGate::default_instance_,
      ResponseEnterGate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseEnterGate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseEnterGate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseEnterGate));
  RequestFinishGate_descriptor_ = file->message_type(16);
  static const int RequestFinishGate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFinishGate, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFinishGate, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFinishGate, result_),
  };
  RequestFinishGate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestFinishGate_descriptor_,
      RequestFinishGate::default_instance_,
      RequestFinishGate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFinishGate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFinishGate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestFinishGate));
  ResponseFinishiGate_descriptor_ = file->message_type(17);
  static const int ResponseFinishiGate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFinishiGate, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFinishiGate, expget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFinishiGate, heroexpget_),
  };
  ResponseFinishiGate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseFinishiGate_descriptor_,
      ResponseFinishiGate::default_instance_,
      ResponseFinishiGate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFinishiGate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFinishiGate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseFinishiGate));
  RequestHeroDressEquip_descriptor_ = file->message_type(18);
  static const int RequestHeroDressEquip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeroDressEquip, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeroDressEquip, herouuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeroDressEquip, equipid_),
  };
  RequestHeroDressEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestHeroDressEquip_descriptor_,
      RequestHeroDressEquip::default_instance_,
      RequestHeroDressEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeroDressEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeroDressEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestHeroDressEquip));
  ResponseHeroDressEquip_descriptor_ = file->message_type(19);
  static const int ResponseHeroDressEquip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeroDressEquip, errcode_),
  };
  ResponseHeroDressEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseHeroDressEquip_descriptor_,
      ResponseHeroDressEquip::default_instance_,
      ResponseHeroDressEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeroDressEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeroDressEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseHeroDressEquip));
  RequestUpgradeHero_descriptor_ = file->message_type(20);
  static const int RequestUpgradeHero_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUpgradeHero, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUpgradeHero, herouuid_),
  };
  RequestUpgradeHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestUpgradeHero_descriptor_,
      RequestUpgradeHero::default_instance_,
      RequestUpgradeHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUpgradeHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestUpgradeHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestUpgradeHero));
  ResponseUpgradeHero_descriptor_ = file->message_type(21);
  static const int ResponseUpgradeHero_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseUpgradeHero, errcode_),
  };
  ResponseUpgradeHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseUpgradeHero_descriptor_,
      ResponseUpgradeHero::default_instance_,
      ResponseUpgradeHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseUpgradeHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseUpgradeHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseUpgradeHero));
  RequestCompoundEquip_descriptor_ = file->message_type(22);
  static const int RequestCompoundEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCompoundEquip, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCompoundEquip, targetequipid_),
  };
  RequestCompoundEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestCompoundEquip_descriptor_,
      RequestCompoundEquip::default_instance_,
      RequestCompoundEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCompoundEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCompoundEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestCompoundEquip));
  ResponseCompoundEquip_descriptor_ = file->message_type(23);
  static const int ResponseCompoundEquip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCompoundEquip, errcode_),
  };
  ResponseCompoundEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseCompoundEquip_descriptor_,
      ResponseCompoundEquip::default_instance_,
      ResponseCompoundEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCompoundEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCompoundEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseCompoundEquip));
  RequestDrawPrizeList_descriptor_ = file->message_type(24);
  static const int RequestDrawPrizeList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDrawPrizeList, userid_),
  };
  RequestDrawPrizeList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestDrawPrizeList_descriptor_,
      RequestDrawPrizeList::default_instance_,
      RequestDrawPrizeList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDrawPrizeList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDrawPrizeList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestDrawPrizeList));
  ResponseDrawPrizeList_descriptor_ = file->message_type(25);
  static const int ResponseDrawPrizeList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDrawPrizeList, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDrawPrizeList, drawlist_),
  };
  ResponseDrawPrizeList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseDrawPrizeList_descriptor_,
      ResponseDrawPrizeList::default_instance_,
      ResponseDrawPrizeList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDrawPrizeList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDrawPrizeList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseDrawPrizeList));
  RequestDrawPrize_descriptor_ = file->message_type(26);
  static const int RequestDrawPrize_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDrawPrize, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDrawPrize, drawid_),
  };
  RequestDrawPrize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestDrawPrize_descriptor_,
      RequestDrawPrize::default_instance_,
      RequestDrawPrize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDrawPrize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDrawPrize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestDrawPrize));
  PBDrawPrize_descriptor_ = file->message_type(27);
  static const int PBDrawPrize_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDrawPrize, prizeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDrawPrize, prizenum_),
  };
  PBDrawPrize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PBDrawPrize_descriptor_,
      PBDrawPrize::default_instance_,
      PBDrawPrize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDrawPrize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBDrawPrize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PBDrawPrize));
  ResponseDrawPrize_descriptor_ = file->message_type(28);
  static const int ResponseDrawPrize_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDrawPrize, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDrawPrize, prizelist_),
  };
  ResponseDrawPrize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseDrawPrize_descriptor_,
      ResponseDrawPrize::default_instance_,
      ResponseDrawPrize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDrawPrize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDrawPrize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseDrawPrize));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestGameGroups_descriptor_, &RequestGameGroups::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBGameGroup_descriptor_, &PBGameGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseGameGroups_descriptor_, &ResponseGameGroups::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestProcGMCommand_descriptor_, &RequestProcGMCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestVerifyToken_descriptor_, &RequestVerifyToken::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseVerifyToken_descriptor_, &ResponseVerifyToken::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestRoleNameList_descriptor_, &RequestRoleNameList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseRoleNameList_descriptor_, &ResponseRoleNameList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestCheckNameValid_descriptor_, &RequestCheckNameValid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseCheckNameValid_descriptor_, &ResponseCheckNameValid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestCreateRole_descriptor_, &RequestCreateRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseCreateRole_descriptor_, &ResponseCreateRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestRoleData_descriptor_, &RequestRoleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseRoleData_descriptor_, &ResponseRoleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestEnterGate_descriptor_, &RequestEnterGate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseEnterGate_descriptor_, &ResponseEnterGate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestFinishGate_descriptor_, &RequestFinishGate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseFinishiGate_descriptor_, &ResponseFinishiGate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestHeroDressEquip_descriptor_, &RequestHeroDressEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseHeroDressEquip_descriptor_, &ResponseHeroDressEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestUpgradeHero_descriptor_, &RequestUpgradeHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseUpgradeHero_descriptor_, &ResponseUpgradeHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestCompoundEquip_descriptor_, &RequestCompoundEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseCompoundEquip_descriptor_, &ResponseCompoundEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestDrawPrizeList_descriptor_, &RequestDrawPrizeList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseDrawPrizeList_descriptor_, &ResponseDrawPrizeList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestDrawPrize_descriptor_, &RequestDrawPrize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PBDrawPrize_descriptor_, &PBDrawPrize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseDrawPrize_descriptor_, &ResponseDrawPrize::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameProtocol_2eproto() {
  delete RequestGameGroups::default_instance_;
  delete RequestGameGroups_reflection_;
  delete PBGameGroup::default_instance_;
  delete PBGameGroup_reflection_;
  delete ResponseGameGroups::default_instance_;
  delete ResponseGameGroups_reflection_;
  delete RequestProcGMCommand::default_instance_;
  delete RequestProcGMCommand_reflection_;
  delete RequestVerifyToken::default_instance_;
  delete RequestVerifyToken_reflection_;
  delete ResponseVerifyToken::default_instance_;
  delete ResponseVerifyToken_reflection_;
  delete RequestRoleNameList::default_instance_;
  delete RequestRoleNameList_reflection_;
  delete ResponseRoleNameList::default_instance_;
  delete ResponseRoleNameList_reflection_;
  delete RequestCheckNameValid::default_instance_;
  delete RequestCheckNameValid_reflection_;
  delete ResponseCheckNameValid::default_instance_;
  delete ResponseCheckNameValid_reflection_;
  delete RequestCreateRole::default_instance_;
  delete RequestCreateRole_reflection_;
  delete ResponseCreateRole::default_instance_;
  delete ResponseCreateRole_reflection_;
  delete RequestRoleData::default_instance_;
  delete RequestRoleData_reflection_;
  delete ResponseRoleData::default_instance_;
  delete ResponseRoleData_reflection_;
  delete RequestEnterGate::default_instance_;
  delete RequestEnterGate_reflection_;
  delete ResponseEnterGate::default_instance_;
  delete ResponseEnterGate_reflection_;
  delete RequestFinishGate::default_instance_;
  delete RequestFinishGate_reflection_;
  delete ResponseFinishiGate::default_instance_;
  delete ResponseFinishiGate_reflection_;
  delete RequestHeroDressEquip::default_instance_;
  delete RequestHeroDressEquip_reflection_;
  delete ResponseHeroDressEquip::default_instance_;
  delete ResponseHeroDressEquip_reflection_;
  delete RequestUpgradeHero::default_instance_;
  delete RequestUpgradeHero_reflection_;
  delete ResponseUpgradeHero::default_instance_;
  delete ResponseUpgradeHero_reflection_;
  delete RequestCompoundEquip::default_instance_;
  delete RequestCompoundEquip_reflection_;
  delete ResponseCompoundEquip::default_instance_;
  delete ResponseCompoundEquip_reflection_;
  delete RequestDrawPrizeList::default_instance_;
  delete RequestDrawPrizeList_reflection_;
  delete ResponseDrawPrizeList::default_instance_;
  delete ResponseDrawPrizeList_reflection_;
  delete RequestDrawPrize::default_instance_;
  delete RequestDrawPrize_reflection_;
  delete PBDrawPrize::default_instance_;
  delete PBDrawPrize_reflection_;
  delete ResponseDrawPrize::default_instance_;
  delete ResponseDrawPrize_reflection_;
}

void protobuf_AddDesc_GameProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::roledata::protobuf_AddDesc_RoleData_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022GameProtocol.proto\022\004ctos\032\016RoleData.pro"
    "to\"\'\n\021RequestGameGroups\022\022\n\nclientType\030\001 "
    "\001(\r\"6\n\013PBGameGroup\022\n\n\002ip\030\001 \001(\t\022\014\n\004port\030\002"
    " \001(\r\022\r\n\005index\030\003 \001(\r\"7\n\022ResponseGameGroup"
    "s\022!\n\006groups\030\001 \003(\0132\021.ctos.PBGameGroup\"7\n\024"
    "RequestProcGMCommand\022\016\n\006userId\030\001 \001(\r\022\017\n\007"
    "command\030\002 \001(\t\"3\n\022RequestVerifyToken\022\016\n\006p"
    "tName\030\001 \001(\t\022\r\n\005token\030\002 \001(\r\"&\n\023ResponseVe"
    "rifyToken\022\017\n\007errCode\030\001 \001(\r\"&\n\023RequestRol"
    "eNameList\022\017\n\007listNum\030\001 \001(\r\"(\n\024ResponseRo"
    "leNameList\022\020\n\010nameList\030\001 \003(\t\")\n\025RequestC"
    "heckNameValid\022\020\n\010roleName\030\001 \001(\t\")\n\026Respo"
    "nseCheckNameValid\022\017\n\007errCode\030\001 \001(\r\"5\n\021Re"
    "questCreateRole\022\016\n\006ptName\030\001 \001(\t\022\020\n\010roleN"
    "ame\030\002 \001(\t\"%\n\022ResponseCreateRole\022\017\n\007errCo"
    "de\030\001 \001(\r\"!\n\017RequestRoleData\022\016\n\006ptName\030\001 "
    "\001(\t\"P\n\020ResponseRoleData\022\017\n\007errCode\030\001 \001(\r"
    "\022+\n\010roleData\030\002 \001(\0132\031.roledata.PBRoleTota"
    "lInfo\"A\n\020RequestEnterGate\022\016\n\006userId\030\001 \001("
    "\r\022\016\n\006gateId\030\002 \001(\r\022\r\n\005heros\030\003 \003(\004\"$\n\021Resp"
    "onseEnterGate\022\017\n\007errCode\030\001 \001(\r\"C\n\021Reques"
    "tFinishGate\022\016\n\006userId\030\001 \001(\r\022\016\n\006gateId\030\002 "
    "\001(\r\022\016\n\006result\030\003 \001(\r\"J\n\023ResponseFinishiGa"
    "te\022\017\n\007errCode\030\001 \001(\r\022\016\n\006expGet\030\002 \001(\r\022\022\n\nh"
    "eroExpGet\030\003 \001(\r\"J\n\025RequestHeroDressEquip"
    "\022\016\n\006userId\030\001 \001(\r\022\020\n\010heroUUID\030\002 \001(\004\022\017\n\007eq"
    "uipId\030\003 \001(\r\")\n\026ResponseHeroDressEquip\022\017\n"
    "\007errCode\030\001 \001(\r\"6\n\022RequestUpgradeHero\022\016\n\006"
    "userId\030\001 \001(\r\022\020\n\010heroUUID\030\002 \001(\r\"&\n\023Respon"
    "seUpgradeHero\022\017\n\007errCode\030\001 \001(\r\"=\n\024Reques"
    "tCompoundEquip\022\016\n\006userId\030\001 \001(\r\022\025\n\rtarget"
    "EquipId\030\002 \001(\r\"(\n\025ResponseCompoundEquip\022\017"
    "\n\007errCode\030\001 \001(\r\"&\n\024RequestDrawPrizeList\022"
    "\016\n\006userId\030\001 \001(\r\":\n\025ResponseDrawPrizeList"
    "\022\017\n\007errCode\030\001 \001(\r\022\020\n\010drawList\030\002 \003(\r\"2\n\020R"
    "equestDrawPrize\022\016\n\006userId\030\001 \001(\r\022\016\n\006drawI"
    "d\030\002 \001(\r\"0\n\013PBDrawPrize\022\017\n\007prizeId\030\001 \001(\r\022"
    "\020\n\010prizeNum\030\002 \001(\r\"J\n\021ResponseDrawPrize\022\017"
    "\n\007errCode\030\001 \001(\r\022$\n\tprizeList\030\002 \003(\0132\021.cto"
    "s.PBDrawPrize", 1573);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameProtocol.proto", &protobuf_RegisterTypes);
  RequestGameGroups::default_instance_ = new RequestGameGroups();
  PBGameGroup::default_instance_ = new PBGameGroup();
  ResponseGameGroups::default_instance_ = new ResponseGameGroups();
  RequestProcGMCommand::default_instance_ = new RequestProcGMCommand();
  RequestVerifyToken::default_instance_ = new RequestVerifyToken();
  ResponseVerifyToken::default_instance_ = new ResponseVerifyToken();
  RequestRoleNameList::default_instance_ = new RequestRoleNameList();
  ResponseRoleNameList::default_instance_ = new ResponseRoleNameList();
  RequestCheckNameValid::default_instance_ = new RequestCheckNameValid();
  ResponseCheckNameValid::default_instance_ = new ResponseCheckNameValid();
  RequestCreateRole::default_instance_ = new RequestCreateRole();
  ResponseCreateRole::default_instance_ = new ResponseCreateRole();
  RequestRoleData::default_instance_ = new RequestRoleData();
  ResponseRoleData::default_instance_ = new ResponseRoleData();
  RequestEnterGate::default_instance_ = new RequestEnterGate();
  ResponseEnterGate::default_instance_ = new ResponseEnterGate();
  RequestFinishGate::default_instance_ = new RequestFinishGate();
  ResponseFinishiGate::default_instance_ = new ResponseFinishiGate();
  RequestHeroDressEquip::default_instance_ = new RequestHeroDressEquip();
  ResponseHeroDressEquip::default_instance_ = new ResponseHeroDressEquip();
  RequestUpgradeHero::default_instance_ = new RequestUpgradeHero();
  ResponseUpgradeHero::default_instance_ = new ResponseUpgradeHero();
  RequestCompoundEquip::default_instance_ = new RequestCompoundEquip();
  ResponseCompoundEquip::default_instance_ = new ResponseCompoundEquip();
  RequestDrawPrizeList::default_instance_ = new RequestDrawPrizeList();
  ResponseDrawPrizeList::default_instance_ = new ResponseDrawPrizeList();
  RequestDrawPrize::default_instance_ = new RequestDrawPrize();
  PBDrawPrize::default_instance_ = new PBDrawPrize();
  ResponseDrawPrize::default_instance_ = new ResponseDrawPrize();
  RequestGameGroups::default_instance_->InitAsDefaultInstance();
  PBGameGroup::default_instance_->InitAsDefaultInstance();
  ResponseGameGroups::default_instance_->InitAsDefaultInstance();
  RequestProcGMCommand::default_instance_->InitAsDefaultInstance();
  RequestVerifyToken::default_instance_->InitAsDefaultInstance();
  ResponseVerifyToken::default_instance_->InitAsDefaultInstance();
  RequestRoleNameList::default_instance_->InitAsDefaultInstance();
  ResponseRoleNameList::default_instance_->InitAsDefaultInstance();
  RequestCheckNameValid::default_instance_->InitAsDefaultInstance();
  ResponseCheckNameValid::default_instance_->InitAsDefaultInstance();
  RequestCreateRole::default_instance_->InitAsDefaultInstance();
  ResponseCreateRole::default_instance_->InitAsDefaultInstance();
  RequestRoleData::default_instance_->InitAsDefaultInstance();
  ResponseRoleData::default_instance_->InitAsDefaultInstance();
  RequestEnterGate::default_instance_->InitAsDefaultInstance();
  ResponseEnterGate::default_instance_->InitAsDefaultInstance();
  RequestFinishGate::default_instance_->InitAsDefaultInstance();
  ResponseFinishiGate::default_instance_->InitAsDefaultInstance();
  RequestHeroDressEquip::default_instance_->InitAsDefaultInstance();
  ResponseHeroDressEquip::default_instance_->InitAsDefaultInstance();
  RequestUpgradeHero::default_instance_->InitAsDefaultInstance();
  ResponseUpgradeHero::default_instance_->InitAsDefaultInstance();
  RequestCompoundEquip::default_instance_->InitAsDefaultInstance();
  ResponseCompoundEquip::default_instance_->InitAsDefaultInstance();
  RequestDrawPrizeList::default_instance_->InitAsDefaultInstance();
  ResponseDrawPrizeList::default_instance_->InitAsDefaultInstance();
  RequestDrawPrize::default_instance_->InitAsDefaultInstance();
  PBDrawPrize::default_instance_->InitAsDefaultInstance();
  ResponseDrawPrize::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameProtocol_2eproto {
  StaticDescriptorInitializer_GameProtocol_2eproto() {
    protobuf_AddDesc_GameProtocol_2eproto();
  }
} static_descriptor_initializer_GameProtocol_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RequestGameGroups::kClientTypeFieldNumber;
#endif  // !_MSC_VER

RequestGameGroups::RequestGameGroups()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestGameGroups::InitAsDefaultInstance() {
}

RequestGameGroups::RequestGameGroups(const RequestGameGroups& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestGameGroups::SharedCtor() {
  _cached_size_ = 0;
  clienttype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGameGroups::~RequestGameGroups() {
  SharedDtor();
}

void RequestGameGroups::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestGameGroups::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestGameGroups::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestGameGroups_descriptor_;
}

const RequestGameGroups& RequestGameGroups::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eproto();  return *default_instance_;
}

RequestGameGroups* RequestGameGroups::default_instance_ = NULL;

RequestGameGroups* RequestGameGroups::New() const {
  return new RequestGameGroups;
}

void RequestGameGroups::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clienttype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestGameGroups::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 clientType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clienttype_)));
          set_has_clienttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestGameGroups::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 clientType = 1;
  if (has_clienttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clienttype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestGameGroups::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 clientType = 1;
  if (has_clienttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clienttype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestGameGroups::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 clientType = 1;
    if (has_clienttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clienttype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGameGroups::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestGameGroups* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestGameGroups*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestGameGroups::MergeFrom(const RequestGameGroups& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clienttype()) {
      set_clienttype(from.clienttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestGameGroups::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestGameGroups::CopyFrom(const RequestGameGroups& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGameGroups::IsInitialized() const {
  
  return true;
}

void RequestGameGroups::Swap(RequestGameGroups* other) {
  if (other != this) {
    std::swap(clienttype_, other->clienttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestGameGroups::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestGameGroups_descriptor_;
  metadata.reflection = RequestGameGroups_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBGameGroup::kIpFieldNumber;
const int PBGameGroup::kPortFieldNumber;
const int PBGameGroup::kIndexFieldNumber;
#endif  // !_MSC_VER

PBGameGroup::PBGameGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBGameGroup::InitAsDefaultInstance() {
}

PBGameGroup::PBGameGroup(const PBGameGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBGameGroup::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBGameGroup::~PBGameGroup() {
  SharedDtor();
}

void PBGameGroup::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void PBGameGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBGameGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBGameGroup_descriptor_;
}

const PBGameGroup& PBGameGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eproto();  return *default_instance_;
}

PBGameGroup* PBGameGroup::default_instance_ = NULL;

PBGameGroup* PBGameGroup::New() const {
  return new PBGameGroup;
}

void PBGameGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBGameGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }
      
      // optional uint32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }
      
      // optional uint32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBGameGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }
  
  // optional uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }
  
  // optional uint32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBGameGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }
  
  // optional uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }
  
  // optional uint32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBGameGroup::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }
    
    // optional uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBGameGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBGameGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBGameGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBGameGroup::MergeFrom(const PBGameGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBGameGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBGameGroup::CopyFrom(const PBGameGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBGameGroup::IsInitialized() const {
  
  return true;
}

void PBGameGroup::Swap(PBGameGroup* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBGameGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBGameGroup_descriptor_;
  metadata.reflection = PBGameGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseGameGroups::kGroupsFieldNumber;
#endif  // !_MSC_VER

ResponseGameGroups::ResponseGameGroups()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseGameGroups::InitAsDefaultInstance() {
}

ResponseGameGroups::ResponseGameGroups(const ResponseGameGroups& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseGameGroups::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseGameGroups::~ResponseGameGroups() {
  SharedDtor();
}

void ResponseGameGroups::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseGameGroups::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseGameGroups::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseGameGroups_descriptor_;
}

const ResponseGameGroups& ResponseGameGroups::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eproto();  return *default_instance_;
}

ResponseGameGroups* ResponseGameGroups::default_instance_ = NULL;

ResponseGameGroups* ResponseGameGroups::New() const {
  return new ResponseGameGroups;
}

void ResponseGameGroups::Clear() {
  groups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseGameGroups::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ctos.PBGameGroup groups = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_groups;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseGameGroups::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ctos.PBGameGroup groups = 1;
  for (int i = 0; i < this->groups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->groups(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseGameGroups::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ctos.PBGameGroup groups = 1;
  for (int i = 0; i < this->groups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->groups(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseGameGroups::ByteSize() const {
  int total_size = 0;
  
  // repeated .ctos.PBGameGroup groups = 1;
  total_size += 1 * this->groups_size();
  for (int i = 0; i < this->groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groups(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseGameGroups::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseGameGroups* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseGameGroups*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseGameGroups::MergeFrom(const ResponseGameGroups& from) {
  GOOGLE_CHECK_NE(&from, this);
  groups_.MergeFrom(from.groups_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseGameGroups::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseGameGroups::CopyFrom(const ResponseGameGroups& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseGameGroups::IsInitialized() const {
  
  return true;
}

void ResponseGameGroups::Swap(ResponseGameGroups* other) {
  if (other != this) {
    groups_.Swap(&other->groups_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseGameGroups::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseGameGroups_descriptor_;
  metadata.reflection = ResponseGameGroups_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestProcGMCommand::kUserIdFieldNumber;
const int RequestProcGMCommand::kCommandFieldNumber;
#endif  // !_MSC_VER

RequestProcGMCommand::RequestProcGMCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestProcGMCommand::InitAsDefaultInstance() {
}

RequestProcGMCommand::RequestProcGMCommand(const RequestProcGMCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestProcGMCommand::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  command_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestProcGMCommand::~RequestProcGMCommand() {
  SharedDtor();
}

void RequestProcGMCommand::SharedDtor() {
  if (command_ != &::google::protobuf::internal::kEmptyString) {
    delete command_;
  }
  if (this != default_instance_) {
  }
}

void RequestProcGMCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestProcGMCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestProcGMCommand_descriptor_;
}

const RequestProcGMCommand& RequestProcGMCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eproto();  return *default_instance_;
}

RequestProcGMCommand* RequestProcGMCommand::default_instance_ = NULL;

RequestProcGMCommand* RequestProcGMCommand::New() const {
  return new RequestProcGMCommand;
}

void RequestProcGMCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    if (has_command()) {
      if (command_ != &::google::protobuf::internal::kEmptyString) {
        command_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestProcGMCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_command;
        break;
      }
      
      // optional string command = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestProcGMCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // optional string command = 2;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->command(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestProcGMCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 userId = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // optional string command = 2;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->command(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestProcGMCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // optional string command = 2;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestProcGMCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestProcGMCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestProcGMCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestProcGMCommand::MergeFrom(const RequestProcGMCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_command()) {
      set_command(from.command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestProcGMCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestProcGMCommand::CopyFrom(const RequestProcGMCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestProcGMCommand::IsInitialized() const {
  
  return true;
}

void RequestProcGMCommand::Swap(RequestProcGMCommand* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(command_, other->command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestProcGMCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestProcGMCommand_descriptor_;
  metadata.reflection = RequestProcGMCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestVerifyToken::kPtNameFieldNumber;
const int RequestVerifyToken::kTokenFieldNumber;
#endif  // !_MSC_VER

RequestVerifyToken::RequestVerifyToken()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestVerifyToken::InitAsDefaultInstance() {
}

RequestVerifyToken::RequestVerifyToken(const RequestVerifyToken& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestVerifyToken::SharedCtor() {
  _cached_size_ = 0;
  ptname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestVerifyToken::~RequestVerifyToken() {
  SharedDtor();
}

void RequestVerifyToken::SharedDtor() {
  if (ptname_ != &::google::protobuf::internal::kEmptyString) {
    delete ptname_;
  }
  if (this != default_instance_) {
  }
}

void RequestVerifyToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestVerifyToken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestVerifyToken_descriptor_;
}

const RequestVerifyToken& RequestVerifyToken::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eproto();  return *default_instance_;
}

RequestVerifyToken* RequestVerifyToken::default_instance_ = NULL;

RequestVerifyToken* RequestVerifyToken::New() const {
  return new RequestVerifyToken;
}

void RequestVerifyToken::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ptname()) {
      if (ptname_ != &::google::protobuf::internal::kEmptyString) {
        ptname_->clear();
      }
    }
    token_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestVerifyToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ptName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ptname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ptname().data(), this->ptname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_token;
        break;
      }
      
      // optional uint32 token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &token_)));
          set_has_token();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestVerifyToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ptName = 1;
  if (has_ptname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ptname().data(), this->ptname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ptname(), output);
  }
  
  // optional uint32 token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->token(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestVerifyToken::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ptName = 1;
  if (has_ptname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ptname().data(), this->ptname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ptname(), target);
  }
  
  // optional uint32 token = 2;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->token(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestVerifyToken::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ptName = 1;
    if (has_ptname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ptname());
    }
    
    // optional uint32 token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->token());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestVerifyToken::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestVerifyToken* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestVerifyToken*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestVerifyToken::MergeFrom(const RequestVerifyToken& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ptname()) {
      set_ptname(from.ptname());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestVerifyToken::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVerifyToken::CopyFrom(const RequestVerifyToken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVerifyToken::IsInitialized() const {
  
  return true;
}

void RequestVerifyToken::Swap(RequestVerifyToken* other) {
  if (other != this) {
    std::swap(ptname_, other->ptname_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestVerifyToken::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestVerifyToken_descriptor_;
  metadata.reflection = RequestVerifyToken_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseVerifyToken::kErrCodeFieldNumber;
#endif  // !_MSC_VER

ResponseVerifyToken::ResponseVerifyToken()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseVerifyToken::InitAsDefaultInstance() {
}

ResponseVerifyToken::ResponseVerifyToken(const ResponseVerifyToken& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseVerifyToken::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseVerifyToken::~ResponseVerifyToken() {
  SharedDtor();
}

void ResponseVerifyToken::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseVerifyToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseVerifyToken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseVerifyToken_descriptor_;
}

const ResponseVerifyToken& ResponseVerifyToken::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eproto();  return *default_instance_;
}

ResponseVerifyToken* ResponseVerifyToken::default_instance_ = NULL;

ResponseVerifyToken* ResponseVerifyToken::New() const {
  return new ResponseVerifyToken;
}

void ResponseVerifyToken::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseVerifyToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 errCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseVerifyToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 errCode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseVerifyToken::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 errCode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseVerifyToken::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 errCode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseVerifyToken::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseVerifyToken* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseVerifyToken*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseVerifyToken::MergeFrom(const ResponseVerifyToken& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseVerifyToken::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseVerifyToken::CopyFrom(const ResponseVerifyToken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseVerifyToken::IsInitialized() const {
  
  return true;
}

void ResponseVerifyToken::Swap(ResponseVerifyToken* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseVerifyToken::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseVerifyToken_descriptor_;
  metadata.reflection = ResponseVerifyToken_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestRoleNameList::kListNumFieldNumber;
#endif  // !_MSC_VER

RequestRoleNameList::RequestRoleNameList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestRoleNameList::InitAsDefaultInstance() {
}

RequestRoleNameList::RequestRoleNameList(const RequestRoleNameList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestRoleNameList::SharedCtor() {
  _cached_size_ = 0;
  listnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRoleNameList::~RequestRoleNameList() {
  SharedDtor();
}

void RequestRoleNameList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestRoleNameList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestRoleNameList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestRoleNameList_descriptor_;
}

const RequestRoleNameList& RequestRoleNameList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eproto();  return *default_instance_;
}

RequestRoleNameList* RequestRoleNameList::default_instance_ = NULL;

RequestRoleNameList* RequestRoleNameList::New() const {
  return new RequestRoleNameList;
}

void RequestRoleNameList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    listnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestRoleNameList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 listNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &listnum_)));
          set_has_listnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestRoleNameList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 listNum = 1;
  if (has_listnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->listnum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestRoleNameList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 listNum = 1;
  if (has_listnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->listnum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestRoleNameList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 listNum = 1;
    if (has_listnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->listnum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRoleNameList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestRoleNameList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestRoleNameList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestRoleNameList::MergeFrom(const RequestRoleNameList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_listnum()) {
      set_listnum(from.listnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestRoleNameList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRoleNameList::CopyFrom(const RequestRoleNameList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRoleNameList::IsInitialized() const {
  
  return true;
}

void RequestRoleNameList::Swap(RequestRoleNameList* other) {
  if (other != this) {
    std::swap(listnum_, other->listnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestRoleNameList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestRoleNameList_descriptor_;
  metadata.reflection = RequestRoleNameList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseRoleNameList::kNameListFieldNumber;
#endif  // !_MSC_VER

ResponseRoleNameList::ResponseRoleNameList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseRoleNameList::InitAsDefaultInstance() {
}

ResponseRoleNameList::ResponseRoleNameList(const ResponseRoleNameList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseRoleNameList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseRoleNameList::~ResponseRoleNameList() {
  SharedDtor();
}

void ResponseRoleNameList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseRoleNameList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseRoleNameList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseRoleNameList_descriptor_;
}

const ResponseRoleNameList& ResponseRoleNameList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eproto();  return *default_instance_;
}

ResponseRoleNameList* ResponseRoleNameList::default_instance_ = NULL;

ResponseRoleNameList* ResponseRoleNameList::New() const {
  return new ResponseRoleNameList;
}

void ResponseRoleNameList::Clear() {
  namelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseRoleNameList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string nameList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nameList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_namelist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->namelist(0).data(), this->namelist(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_nameList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseRoleNameList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string nameList = 1;
  for (int i = 0; i < this->namelist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->namelist(i).data(), this->namelist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->namelist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseRoleNameList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string nameList = 1;
  for (int i = 0; i < this->namelist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->namelist(i).data(), this->namelist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->namelist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseRoleNameList::ByteSize() const {
  int total_size = 0;
  
  // repeated string nameList = 1;
  total_size += 1 * this->namelist_size();
  for (int i = 0; i < this->namelist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->namelist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseRoleNameList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseRoleNameList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseRoleNameList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseRoleNameList::MergeFrom(const ResponseRoleNameList& from) {
  GOOGLE_CHECK_NE(&from, this);
  namelist_.MergeFrom(from.namelist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseRoleNameList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseRoleNameList::CopyFrom(const ResponseRoleNameList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseRoleNameList::IsInitialized() const {
  
  return true;
}

void ResponseRoleNameList::Swap(ResponseRoleNameList* other) {
  if (other != this) {
    namelist_.Swap(&other->namelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseRoleNameList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseRoleNameList_descriptor_;
  metadata.reflection = ResponseRoleNameList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestCheckNameValid::kRoleNameFieldNumber;
#endif  // !_MSC_VER

RequestCheckNameValid::RequestCheckNameValid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestCheckNameValid::InitAsDefaultInstance() {
}

RequestCheckNameValid::RequestCheckNameValid(const RequestCheckNameValid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestCheckNameValid::SharedCtor() {
  _cached_size_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestCheckNameValid::~RequestCheckNameValid() {
  SharedDtor();
}

void RequestCheckNameValid::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void RequestCheckNameValid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestCheckNameValid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestCheckNameValid_descriptor_;
}

const RequestCheckNameValid& RequestCheckNameValid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eproto();  return *default_instance_;
}

RequestCheckNameValid* RequestCheckNameValid::default_instance_ = NULL;

RequestCheckNameValid* RequestCheckNameValid::New() const {
  return new RequestCheckNameValid;
}

void RequestCheckNameValid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestCheckNameValid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string roleName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestCheckNameValid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rolename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestCheckNameValid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rolename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestCheckNameValid::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string roleName = 1;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCheckNameValid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestCheckNameValid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestCheckNameValid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestCheckNameValid::MergeFrom(const RequestCheckNameValid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestCheckNameValid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestCheckNameValid::CopyFrom(const RequestCheckNameValid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCheckNameValid::IsInitialized() const {
  
  return true;
}

void RequestCheckNameValid::Swap(RequestCheckNameValid* other) {
  if (other != this) {
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestCheckNameValid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestCheckNameValid_descriptor_;
  metadata.reflection = RequestCheckNameValid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseCheckNameValid::kErrCodeFieldNumber;
#endif  // !_MSC_VER

ResponseCheckNameValid::ResponseCheckNameValid()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseCheckNameValid::InitAsDefaultInstance() {
}

ResponseCheckNameValid::ResponseCheckNameValid(const ResponseCheckNameValid& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseCheckNameValid::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseCheckNameValid::~ResponseCheckNameValid() {
  SharedDtor();
}

void ResponseCheckNameValid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseCheckNameValid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseCheckNameValid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseCheckNameValid_descriptor_;
}

const ResponseCheckNameValid& ResponseCheckNameValid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eproto();  return *default_instance_;
}

ResponseCheckNameValid* ResponseCheckNameValid::default_instance_ = NULL;

ResponseCheckNameValid* ResponseCheckNameValid::New() const {
  return new ResponseCheckNameValid;
}

void ResponseCheckNameValid::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseCheckNameValid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 errCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseCheckNameValid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 errCode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseCheckNameValid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 errCode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseCheckNameValid::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 errCode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseCheckNameValid::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseCheckNameValid* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseCheckNameValid*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseCheckNameValid::MergeFrom(const ResponseCheckNameValid& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseCheckNameValid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseCheckNameValid::CopyFrom(const ResponseCheckNameValid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseCheckNameValid::IsInitialized() const {
  
  return true;
}

void ResponseCheckNameValid::Swap(ResponseCheckNameValid* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseCheckNameValid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseCheckNameValid_descriptor_;
  metadata.reflection = ResponseCheckNameValid_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestCreateRole::kPtNameFieldNumber;
const int RequestCreateRole::kRoleNameFieldNumber;
#endif  // !_MSC_VER

RequestCreateRole::RequestCreateRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestCreateRole::InitAsDefaultInstance() {
}

RequestCreateRole::RequestCreateRole(const RequestCreateRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestCreateRole::SharedCtor() {
  _cached_size_ = 0;
  ptname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestCreateRole::~RequestCreateRole() {
  SharedDtor();
}

void RequestCreateRole::SharedDtor() {
  if (ptname_ != &::google::protobuf::internal::kEmptyString) {
    delete ptname_;
  }
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void RequestCreateRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestCreateRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestCreateRole_descriptor_;
}

const RequestCreateRole& RequestCreateRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eproto();  return *default_instance_;
}

RequestCreateRole* RequestCreateRole::default_instance_ = NULL;

RequestCreateRole* RequestCreateRole::New() const {
  return new RequestCreateRole;
}

void RequestCreateRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ptname()) {
      if (ptname_ != &::google::protobuf::internal::kEmptyString) {
        ptname_->clear();
      }
    }
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestCreateRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ptName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ptname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ptname().data(), this->ptname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roleName;
        break;
      }
      
      // optional string roleName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestCreateRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ptName = 1;
  if (has_ptname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ptname().data(), this->ptname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ptname(), output);
  }
  
  // optional string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rolename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestCreateRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ptName = 1;
  if (has_ptname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ptname().data(), this->ptname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ptname(), target);
  }
  
  // optional string roleName = 2;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rolename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestCreateRole::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ptName = 1;
    if (has_ptname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ptname());
    }
    
    // optional string roleName = 2;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCreateRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestCreateRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestCreateRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestCreateRole::MergeFrom(const RequestCreateRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ptname()) {
      set_ptname(from.ptname());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestCreateRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestCreateRole::CopyFrom(const RequestCreateRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCreateRole::IsInitialized() const {
  
  return true;
}

void RequestCreateRole::Swap(RequestCreateRole* other) {
  if (other != this) {
    std::swap(ptname_, other->ptname_);
    std::swap(rolename_, other->rolename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestCreateRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestCreateRole_descriptor_;
  metadata.reflection = RequestCreateRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseCreateRole::kErrCodeFieldNumber;
#endif  // !_MSC_VER

ResponseCreateRole::ResponseCreateRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseCreateRole::InitAsDefaultInstance() {
}

ResponseCreateRole::ResponseCreateRole(const ResponseCreateRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseCreateRole::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseCreateRole::~ResponseCreateRole() {
  SharedDtor();
}

void ResponseCreateRole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseCreateRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseCreateRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseCreateRole_descriptor_;
}

const ResponseCreateRole& ResponseCreateRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eproto();  return *default_instance_;
}

ResponseCreateRole* ResponseCreateRole::default_instance_ = NULL;

ResponseCreateRole* ResponseCreateRole::New() const {
  return new ResponseCreateRole;
}

void ResponseCreateRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseCreateRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 errCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseCreateRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 errCode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseCreateRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 errCode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseCreateRole::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 errCode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseCreateRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseCreateRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseCreateRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseCreateRole::MergeFrom(const ResponseCreateRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseCreateRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseCreateRole::CopyFrom(const ResponseCreateRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseCreateRole::IsInitialized() const {
  
  return true;
}

void ResponseCreateRole::Swap(ResponseCreateRole* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseCreateRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseCreateRole_descriptor_;
  metadata.reflection = ResponseCreateRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestRoleData::kPtNameFieldNumber;
#endif  // !_MSC_VER

RequestRoleData::RequestRoleData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestRoleData::InitAsDefaultInstance() {
}

RequestRoleData::RequestRoleData(const RequestRoleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestRoleData::SharedCtor() {
  _cached_size_ = 0;
  ptname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRoleData::~RequestRoleData() {
  SharedDtor();
}

void RequestRoleData::SharedDtor() {
  if (ptname_ != &::google::protobuf::internal::kEmptyString) {
    delete ptname_;
  }
  if (this != default_instance_) {
  }
}

void RequestRoleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestRoleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestRoleData_descriptor_;
}

const RequestRoleData& RequestRoleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eproto();  return *default_instance_;
}

RequestRoleData* RequestRoleData::default_instance_ = NULL;

RequestRoleData* RequestRoleData::New() const {
  return new RequestRoleData;
}

void RequestRoleData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ptname()) {
      if (ptname_ != &::google::protobuf::internal::kEmptyString) {
        ptname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestRoleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ptName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ptname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ptname().data(), this->ptname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestRoleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ptName = 1;
  if (has_ptname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ptname().data(), this->ptname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ptname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestRoleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ptName = 1;
  if (has_ptname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ptname().data(), this->ptname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ptname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestRoleData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ptName = 1;
    if (has_ptname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ptname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRoleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestRoleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestRoleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestRoleData::MergeFrom(const RequestRoleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ptname()) {
      set_ptname(from.ptname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestRoleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRoleData::CopyFrom(const RequestRoleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRoleData::IsInitialized() const {
  
  return true;
}

void RequestRoleData::Swap(RequestRoleData* other) {
  if (other != this) {
    std::swap(ptname_, other->ptname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestRoleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestRoleData_descriptor_;
  metadata.reflection = RequestRoleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseRoleData::kErrCodeFieldNumber;
const int ResponseRoleData::kRoleDataFieldNumber;
#endif  // !_MSC_VER

ResponseRoleData::ResponseRoleData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseRoleData::InitAsDefaultInstance() {
  roledata_ = const_cast< ::roledata::PBRoleTotalInfo*>(&::roledata::PBRoleTotalInfo::default_instance());
}

ResponseRoleData::ResponseRoleData(const ResponseRoleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseRoleData::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  roledata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseRoleData::~ResponseRoleData() {
  SharedDtor();
}

void ResponseRoleData::SharedDtor() {
  if (this != default_instance_) {
    delete roledata_;
  }
}

void ResponseRoleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseRoleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseRoleData_descriptor_;
}

const ResponseRoleData& ResponseRoleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eproto();  return *default_instance_;
}

ResponseRoleData* ResponseRoleData::default_instance_ = NULL;

ResponseRoleData* ResponseRoleData::New() const {
  return new ResponseRoleData;
}

void ResponseRoleData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
    if (has_roledata()) {
      if (roledata_ != NULL) roledata_->::roledata::PBRoleTotalInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseRoleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 errCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roleData;
        break;
      }
      
      // optional .roledata.PBRoleTotalInfo roleData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roledata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseRoleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 errCode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errcode(), output);
  }
  
  // optional .roledata.PBRoleTotalInfo roleData = 2;
  if (has_roledata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roledata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseRoleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 errCode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  // optional .roledata.PBRoleTotalInfo roleData = 2;
  if (has_roledata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roledata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseRoleData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 errCode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }
    
    // optional .roledata.PBRoleTotalInfo roleData = 2;
    if (has_roledata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roledata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseRoleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseRoleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseRoleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseRoleData::MergeFrom(const ResponseRoleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_roledata()) {
      mutable_roledata()->::roledata::PBRoleTotalInfo::MergeFrom(from.roledata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseRoleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseRoleData::CopyFrom(const ResponseRoleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseRoleData::IsInitialized() const {
  
  return true;
}

void ResponseRoleData::Swap(ResponseRoleData* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(roledata_, other->roledata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseRoleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseRoleData_descriptor_;
  metadata.reflection = ResponseRoleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestEnterGate::kUserIdFieldNumber;
const int RequestEnterGate::kGateIdFieldNumber;
const int RequestEnterGate::kHerosFieldNumber;
#endif  // !_MSC_VER

RequestEnterGate::RequestEnterGate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestEnterGate::InitAsDefaultInstance() {
}

RequestEnterGate::RequestEnterGate(const RequestEnterGate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestEnterGate::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  gateid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestEnterGate::~RequestEnterGate() {
  SharedDtor();
}

void RequestEnterGate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestEnterGate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestEnterGate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestEnterGate_descriptor_;
}

const RequestEnterGate& RequestEnterGate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eproto();  return *default_instance_;
}

RequestEnterGate* RequestEnterGate::default_instance_ = NULL;

RequestEnterGate* RequestEnterGate::New() const {
  return new RequestEnterGate;
}

void RequestEnterGate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    gateid_ = 0u;
  }
  heros_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestEnterGate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gateId;
        break;
      }
      
      // optional uint32 gateId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_heros;
        break;
      }
      
      // repeated uint64 heros = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_heros())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_heros())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_heros;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestEnterGate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // optional uint32 gateId = 2;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gateid(), output);
  }
  
  // repeated uint64 heros = 3;
  for (int i = 0; i < this->heros_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->heros(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestEnterGate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 userId = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // optional uint32 gateId = 2;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gateid(), target);
  }
  
  // repeated uint64 heros = 3;
  for (int i = 0; i < this->heros_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->heros(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestEnterGate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // optional uint32 gateId = 2;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }
    
  }
  // repeated uint64 heros = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->heros_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->heros(i));
    }
    total_size += 1 * this->heros_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestEnterGate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestEnterGate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestEnterGate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestEnterGate::MergeFrom(const RequestEnterGate& from) {
  GOOGLE_CHECK_NE(&from, this);
  heros_.MergeFrom(from.heros_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestEnterGate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestEnterGate::CopyFrom(const RequestEnterGate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestEnterGate::IsInitialized() const {
  
  return true;
}

void RequestEnterGate::Swap(RequestEnterGate* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(gateid_, other->gateid_);
    heros_.Swap(&other->heros_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestEnterGate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestEnterGate_descriptor_;
  metadata.reflection = RequestEnterGate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseEnterGate::kErrCodeFieldNumber;
#endif  // !_MSC_VER

ResponseEnterGate::ResponseEnterGate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseEnterGate::InitAsDefaultInstance() {
}

ResponseEnterGate::ResponseEnterGate(const ResponseEnterGate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseEnterGate::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseEnterGate::~ResponseEnterGate() {
  SharedDtor();
}

void ResponseEnterGate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseEnterGate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseEnterGate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseEnterGate_descriptor_;
}

const ResponseEnterGate& ResponseEnterGate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eproto();  return *default_instance_;
}

ResponseEnterGate* ResponseEnterGate::default_instance_ = NULL;

ResponseEnterGate* ResponseEnterGate::New() const {
  return new ResponseEnterGate;
}

void ResponseEnterGate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseEnterGate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 errCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseEnterGate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 errCode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseEnterGate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 errCode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseEnterGate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 errCode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseEnterGate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseEnterGate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseEnterGate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseEnterGate::MergeFrom(const ResponseEnterGate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseEnterGate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseEnterGate::CopyFrom(const ResponseEnterGate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseEnterGate::IsInitialized() const {
  
  return true;
}

void ResponseEnterGate::Swap(ResponseEnterGate* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseEnterGate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseEnterGate_descriptor_;
  metadata.reflection = ResponseEnterGate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestFinishGate::kUserIdFieldNumber;
const int RequestFinishGate::kGateIdFieldNumber;
const int RequestFinishGate::kResultFieldNumber;
#endif  // !_MSC_VER

RequestFinishGate::RequestFinishGate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestFinishGate::InitAsDefaultInstance() {
}

RequestFinishGate::RequestFinishGate(const RequestFinishGate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestFinishGate::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  gateid_ = 0u;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestFinishGate::~RequestFinishGate() {
  SharedDtor();
}

void RequestFinishGate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestFinishGate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestFinishGate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestFinishGate_descriptor_;
}

const RequestFinishGate& RequestFinishGate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eproto();  return *default_instance_;
}

RequestFinishGate* RequestFinishGate::default_instance_ = NULL;

RequestFinishGate* RequestFinishGate::New() const {
  return new RequestFinishGate;
}

void RequestFinishGate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    gateid_ = 0u;
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestFinishGate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gateId;
        break;
      }
      
      // optional uint32 gateId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }
      
      // optional uint32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestFinishGate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // optional uint32 gateId = 2;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gateid(), output);
  }
  
  // optional uint32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestFinishGate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 userId = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // optional uint32 gateId = 2;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gateid(), target);
  }
  
  // optional uint32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestFinishGate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // optional uint32 gateId = 2;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }
    
    // optional uint32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestFinishGate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestFinishGate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestFinishGate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestFinishGate::MergeFrom(const RequestFinishGate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestFinishGate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestFinishGate::CopyFrom(const RequestFinishGate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestFinishGate::IsInitialized() const {
  
  return true;
}

void RequestFinishGate::Swap(RequestFinishGate* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(gateid_, other->gateid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestFinishGate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestFinishGate_descriptor_;
  metadata.reflection = RequestFinishGate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseFinishiGate::kErrCodeFieldNumber;
const int ResponseFinishiGate::kExpGetFieldNumber;
const int ResponseFinishiGate::kHeroExpGetFieldNumber;
#endif  // !_MSC_VER

ResponseFinishiGate::ResponseFinishiGate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseFinishiGate::InitAsDefaultInstance() {
}

ResponseFinishiGate::ResponseFinishiGate(const ResponseFinishiGate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseFinishiGate::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  expget_ = 0u;
  heroexpget_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseFinishiGate::~ResponseFinishiGate() {
  SharedDtor();
}

void ResponseFinishiGate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseFinishiGate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseFinishiGate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseFinishiGate_descriptor_;
}

const ResponseFinishiGate& ResponseFinishiGate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eproto();  return *default_instance_;
}

ResponseFinishiGate* ResponseFinishiGate::default_instance_ = NULL;

ResponseFinishiGate* ResponseFinishiGate::New() const {
  return new ResponseFinishiGate;
}

void ResponseFinishiGate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
    expget_ = 0u;
    heroexpget_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseFinishiGate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 errCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expGet;
        break;
      }
      
      // optional uint32 expGet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expGet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expget_)));
          set_has_expget();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_heroExpGet;
        break;
      }
      
      // optional uint32 heroExpGet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroExpGet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroexpget_)));
          set_has_heroexpget();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseFinishiGate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 errCode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errcode(), output);
  }
  
  // optional uint32 expGet = 2;
  if (has_expget()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->expget(), output);
  }
  
  // optional uint32 heroExpGet = 3;
  if (has_heroexpget()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->heroexpget(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseFinishiGate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 errCode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  // optional uint32 expGet = 2;
  if (has_expget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->expget(), target);
  }
  
  // optional uint32 heroExpGet = 3;
  if (has_heroexpget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->heroexpget(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseFinishiGate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 errCode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }
    
    // optional uint32 expGet = 2;
    if (has_expget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expget());
    }
    
    // optional uint32 heroExpGet = 3;
    if (has_heroexpget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroexpget());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseFinishiGate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseFinishiGate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseFinishiGate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseFinishiGate::MergeFrom(const ResponseFinishiGate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_expget()) {
      set_expget(from.expget());
    }
    if (from.has_heroexpget()) {
      set_heroexpget(from.heroexpget());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseFinishiGate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseFinishiGate::CopyFrom(const ResponseFinishiGate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseFinishiGate::IsInitialized() const {
  
  return true;
}

void ResponseFinishiGate::Swap(ResponseFinishiGate* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(expget_, other->expget_);
    std::swap(heroexpget_, other->heroexpget_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseFinishiGate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseFinishiGate_descriptor_;
  metadata.reflection = ResponseFinishiGate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestHeroDressEquip::kUserIdFieldNumber;
const int RequestHeroDressEquip::kHeroUUIDFieldNumber;
const int RequestHeroDressEquip::kEquipIdFieldNumber;
#endif  // !_MSC_VER

RequestHeroDressEquip::RequestHeroDressEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestHeroDressEquip::InitAsDefaultInstance() {
}

RequestHeroDressEquip::RequestHeroDressEquip(const RequestHeroDressEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestHeroDressEquip::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  herouuid_ = GOOGLE_ULONGLONG(0);
  equipid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestHeroDressEquip::~RequestHeroDressEquip() {
  SharedDtor();
}

void RequestHeroDressEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestHeroDressEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestHeroDressEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestHeroDressEquip_descriptor_;
}

const RequestHeroDressEquip& RequestHeroDressEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eproto();  return *default_instance_;
}

RequestHeroDressEquip* RequestHeroDressEquip::default_instance_ = NULL;

RequestHeroDressEquip* RequestHeroDressEquip::New() const {
  return new RequestHeroDressEquip;
}

void RequestHeroDressEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    herouuid_ = GOOGLE_ULONGLONG(0);
    equipid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestHeroDressEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heroUUID;
        break;
      }
      
      // optional uint64 heroUUID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroUUID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &herouuid_)));
          set_has_herouuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equipId;
        break;
      }
      
      // optional uint32 equipId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestHeroDressEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // optional uint64 heroUUID = 2;
  if (has_herouuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->herouuid(), output);
  }
  
  // optional uint32 equipId = 3;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->equipid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestHeroDressEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 userId = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // optional uint64 heroUUID = 2;
  if (has_herouuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->herouuid(), target);
  }
  
  // optional uint32 equipId = 3;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->equipid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestHeroDressEquip::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // optional uint64 heroUUID = 2;
    if (has_herouuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->herouuid());
    }
    
    // optional uint32 equipId = 3;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestHeroDressEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestHeroDressEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestHeroDressEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestHeroDressEquip::MergeFrom(const RequestHeroDressEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_herouuid()) {
      set_herouuid(from.herouuid());
    }
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestHeroDressEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestHeroDressEquip::CopyFrom(const RequestHeroDressEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHeroDressEquip::IsInitialized() const {
  
  return true;
}

void RequestHeroDressEquip::Swap(RequestHeroDressEquip* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(herouuid_, other->herouuid_);
    std::swap(equipid_, other->equipid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestHeroDressEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestHeroDressEquip_descriptor_;
  metadata.reflection = RequestHeroDressEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseHeroDressEquip::kErrCodeFieldNumber;
#endif  // !_MSC_VER

ResponseHeroDressEquip::ResponseHeroDressEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseHeroDressEquip::InitAsDefaultInstance() {
}

ResponseHeroDressEquip::ResponseHeroDressEquip(const ResponseHeroDressEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseHeroDressEquip::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseHeroDressEquip::~ResponseHeroDressEquip() {
  SharedDtor();
}

void ResponseHeroDressEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseHeroDressEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseHeroDressEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseHeroDressEquip_descriptor_;
}

const ResponseHeroDressEquip& ResponseHeroDressEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eproto();  return *default_instance_;
}

ResponseHeroDressEquip* ResponseHeroDressEquip::default_instance_ = NULL;

ResponseHeroDressEquip* ResponseHeroDressEquip::New() const {
  return new ResponseHeroDressEquip;
}

void ResponseHeroDressEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseHeroDressEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 errCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseHeroDressEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 errCode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseHeroDressEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 errCode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseHeroDressEquip::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 errCode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseHeroDressEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseHeroDressEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseHeroDressEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseHeroDressEquip::MergeFrom(const ResponseHeroDressEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseHeroDressEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseHeroDressEquip::CopyFrom(const ResponseHeroDressEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseHeroDressEquip::IsInitialized() const {
  
  return true;
}

void ResponseHeroDressEquip::Swap(ResponseHeroDressEquip* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseHeroDressEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseHeroDressEquip_descriptor_;
  metadata.reflection = ResponseHeroDressEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestUpgradeHero::kUserIdFieldNumber;
const int RequestUpgradeHero::kHeroUUIDFieldNumber;
#endif  // !_MSC_VER

RequestUpgradeHero::RequestUpgradeHero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestUpgradeHero::InitAsDefaultInstance() {
}

RequestUpgradeHero::RequestUpgradeHero(const RequestUpgradeHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestUpgradeHero::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  herouuid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestUpgradeHero::~RequestUpgradeHero() {
  SharedDtor();
}

void RequestUpgradeHero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestUpgradeHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestUpgradeHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestUpgradeHero_descriptor_;
}

const RequestUpgradeHero& RequestUpgradeHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eproto();  return *default_instance_;
}

RequestUpgradeHero* RequestUpgradeHero::default_instance_ = NULL;

RequestUpgradeHero* RequestUpgradeHero::New() const {
  return new RequestUpgradeHero;
}

void RequestUpgradeHero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    herouuid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestUpgradeHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heroUUID;
        break;
      }
      
      // optional uint32 heroUUID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroUUID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &herouuid_)));
          set_has_herouuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestUpgradeHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // optional uint32 heroUUID = 2;
  if (has_herouuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->herouuid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestUpgradeHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 userId = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // optional uint32 heroUUID = 2;
  if (has_herouuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->herouuid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestUpgradeHero::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // optional uint32 heroUUID = 2;
    if (has_herouuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->herouuid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestUpgradeHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestUpgradeHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestUpgradeHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestUpgradeHero::MergeFrom(const RequestUpgradeHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_herouuid()) {
      set_herouuid(from.herouuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestUpgradeHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestUpgradeHero::CopyFrom(const RequestUpgradeHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestUpgradeHero::IsInitialized() const {
  
  return true;
}

void RequestUpgradeHero::Swap(RequestUpgradeHero* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(herouuid_, other->herouuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestUpgradeHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestUpgradeHero_descriptor_;
  metadata.reflection = RequestUpgradeHero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseUpgradeHero::kErrCodeFieldNumber;
#endif  // !_MSC_VER

ResponseUpgradeHero::ResponseUpgradeHero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseUpgradeHero::InitAsDefaultInstance() {
}

ResponseUpgradeHero::ResponseUpgradeHero(const ResponseUpgradeHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseUpgradeHero::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseUpgradeHero::~ResponseUpgradeHero() {
  SharedDtor();
}

void ResponseUpgradeHero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseUpgradeHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseUpgradeHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseUpgradeHero_descriptor_;
}

const ResponseUpgradeHero& ResponseUpgradeHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eproto();  return *default_instance_;
}

ResponseUpgradeHero* ResponseUpgradeHero::default_instance_ = NULL;

ResponseUpgradeHero* ResponseUpgradeHero::New() const {
  return new ResponseUpgradeHero;
}

void ResponseUpgradeHero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseUpgradeHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 errCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseUpgradeHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 errCode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseUpgradeHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 errCode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseUpgradeHero::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 errCode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseUpgradeHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseUpgradeHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseUpgradeHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseUpgradeHero::MergeFrom(const ResponseUpgradeHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseUpgradeHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseUpgradeHero::CopyFrom(const ResponseUpgradeHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseUpgradeHero::IsInitialized() const {
  
  return true;
}

void ResponseUpgradeHero::Swap(ResponseUpgradeHero* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseUpgradeHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseUpgradeHero_descriptor_;
  metadata.reflection = ResponseUpgradeHero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestCompoundEquip::kUserIdFieldNumber;
const int RequestCompoundEquip::kTargetEquipIdFieldNumber;
#endif  // !_MSC_VER

RequestCompoundEquip::RequestCompoundEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestCompoundEquip::InitAsDefaultInstance() {
}

RequestCompoundEquip::RequestCompoundEquip(const RequestCompoundEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestCompoundEquip::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  targetequipid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestCompoundEquip::~RequestCompoundEquip() {
  SharedDtor();
}

void RequestCompoundEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestCompoundEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestCompoundEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestCompoundEquip_descriptor_;
}

const RequestCompoundEquip& RequestCompoundEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eproto();  return *default_instance_;
}

RequestCompoundEquip* RequestCompoundEquip::default_instance_ = NULL;

RequestCompoundEquip* RequestCompoundEquip::New() const {
  return new RequestCompoundEquip;
}

void RequestCompoundEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    targetequipid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestCompoundEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetEquipId;
        break;
      }
      
      // optional uint32 targetEquipId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetEquipId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetequipid_)));
          set_has_targetequipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestCompoundEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // optional uint32 targetEquipId = 2;
  if (has_targetequipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->targetequipid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestCompoundEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 userId = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // optional uint32 targetEquipId = 2;
  if (has_targetequipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->targetequipid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestCompoundEquip::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // optional uint32 targetEquipId = 2;
    if (has_targetequipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetequipid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCompoundEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestCompoundEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestCompoundEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestCompoundEquip::MergeFrom(const RequestCompoundEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_targetequipid()) {
      set_targetequipid(from.targetequipid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestCompoundEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestCompoundEquip::CopyFrom(const RequestCompoundEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCompoundEquip::IsInitialized() const {
  
  return true;
}

void RequestCompoundEquip::Swap(RequestCompoundEquip* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(targetequipid_, other->targetequipid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestCompoundEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestCompoundEquip_descriptor_;
  metadata.reflection = RequestCompoundEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseCompoundEquip::kErrCodeFieldNumber;
#endif  // !_MSC_VER

ResponseCompoundEquip::ResponseCompoundEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseCompoundEquip::InitAsDefaultInstance() {
}

ResponseCompoundEquip::ResponseCompoundEquip(const ResponseCompoundEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseCompoundEquip::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseCompoundEquip::~ResponseCompoundEquip() {
  SharedDtor();
}

void ResponseCompoundEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseCompoundEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseCompoundEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseCompoundEquip_descriptor_;
}

const ResponseCompoundEquip& ResponseCompoundEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eproto();  return *default_instance_;
}

ResponseCompoundEquip* ResponseCompoundEquip::default_instance_ = NULL;

ResponseCompoundEquip* ResponseCompoundEquip::New() const {
  return new ResponseCompoundEquip;
}

void ResponseCompoundEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseCompoundEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 errCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseCompoundEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 errCode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseCompoundEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 errCode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseCompoundEquip::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 errCode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseCompoundEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseCompoundEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseCompoundEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseCompoundEquip::MergeFrom(const ResponseCompoundEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseCompoundEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseCompoundEquip::CopyFrom(const ResponseCompoundEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseCompoundEquip::IsInitialized() const {
  
  return true;
}

void ResponseCompoundEquip::Swap(ResponseCompoundEquip* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseCompoundEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseCompoundEquip_descriptor_;
  metadata.reflection = ResponseCompoundEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestDrawPrizeList::kUserIdFieldNumber;
#endif  // !_MSC_VER

RequestDrawPrizeList::RequestDrawPrizeList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestDrawPrizeList::InitAsDefaultInstance() {
}

RequestDrawPrizeList::RequestDrawPrizeList(const RequestDrawPrizeList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestDrawPrizeList::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestDrawPrizeList::~RequestDrawPrizeList() {
  SharedDtor();
}

void RequestDrawPrizeList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestDrawPrizeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestDrawPrizeList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestDrawPrizeList_descriptor_;
}

const RequestDrawPrizeList& RequestDrawPrizeList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eproto();  return *default_instance_;
}

RequestDrawPrizeList* RequestDrawPrizeList::default_instance_ = NULL;

RequestDrawPrizeList* RequestDrawPrizeList::New() const {
  return new RequestDrawPrizeList;
}

void RequestDrawPrizeList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestDrawPrizeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestDrawPrizeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestDrawPrizeList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 userId = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestDrawPrizeList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestDrawPrizeList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestDrawPrizeList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestDrawPrizeList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestDrawPrizeList::MergeFrom(const RequestDrawPrizeList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestDrawPrizeList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestDrawPrizeList::CopyFrom(const RequestDrawPrizeList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestDrawPrizeList::IsInitialized() const {
  
  return true;
}

void RequestDrawPrizeList::Swap(RequestDrawPrizeList* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestDrawPrizeList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestDrawPrizeList_descriptor_;
  metadata.reflection = RequestDrawPrizeList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseDrawPrizeList::kErrCodeFieldNumber;
const int ResponseDrawPrizeList::kDrawListFieldNumber;
#endif  // !_MSC_VER

ResponseDrawPrizeList::ResponseDrawPrizeList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseDrawPrizeList::InitAsDefaultInstance() {
}

ResponseDrawPrizeList::ResponseDrawPrizeList(const ResponseDrawPrizeList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseDrawPrizeList::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseDrawPrizeList::~ResponseDrawPrizeList() {
  SharedDtor();
}

void ResponseDrawPrizeList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseDrawPrizeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseDrawPrizeList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseDrawPrizeList_descriptor_;
}

const ResponseDrawPrizeList& ResponseDrawPrizeList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eproto();  return *default_instance_;
}

ResponseDrawPrizeList* ResponseDrawPrizeList::default_instance_ = NULL;

ResponseDrawPrizeList* ResponseDrawPrizeList::New() const {
  return new ResponseDrawPrizeList;
}

void ResponseDrawPrizeList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  drawlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseDrawPrizeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 errCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_drawList;
        break;
      }
      
      // repeated uint32 drawList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drawList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_drawlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_drawlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_drawList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseDrawPrizeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 errCode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errcode(), output);
  }
  
  // repeated uint32 drawList = 2;
  for (int i = 0; i < this->drawlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->drawlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseDrawPrizeList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 errCode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  // repeated uint32 drawList = 2;
  for (int i = 0; i < this->drawlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->drawlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseDrawPrizeList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 errCode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }
    
  }
  // repeated uint32 drawList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->drawlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->drawlist(i));
    }
    total_size += 1 * this->drawlist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseDrawPrizeList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseDrawPrizeList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseDrawPrizeList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseDrawPrizeList::MergeFrom(const ResponseDrawPrizeList& from) {
  GOOGLE_CHECK_NE(&from, this);
  drawlist_.MergeFrom(from.drawlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseDrawPrizeList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseDrawPrizeList::CopyFrom(const ResponseDrawPrizeList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseDrawPrizeList::IsInitialized() const {
  
  return true;
}

void ResponseDrawPrizeList::Swap(ResponseDrawPrizeList* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    drawlist_.Swap(&other->drawlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseDrawPrizeList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseDrawPrizeList_descriptor_;
  metadata.reflection = ResponseDrawPrizeList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestDrawPrize::kUserIdFieldNumber;
const int RequestDrawPrize::kDrawIdFieldNumber;
#endif  // !_MSC_VER

RequestDrawPrize::RequestDrawPrize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestDrawPrize::InitAsDefaultInstance() {
}

RequestDrawPrize::RequestDrawPrize(const RequestDrawPrize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestDrawPrize::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0u;
  drawid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestDrawPrize::~RequestDrawPrize() {
  SharedDtor();
}

void RequestDrawPrize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestDrawPrize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestDrawPrize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestDrawPrize_descriptor_;
}

const RequestDrawPrize& RequestDrawPrize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eproto();  return *default_instance_;
}

RequestDrawPrize* RequestDrawPrize::default_instance_ = NULL;

RequestDrawPrize* RequestDrawPrize::New() const {
  return new RequestDrawPrize;
}

void RequestDrawPrize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0u;
    drawid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestDrawPrize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_drawId;
        break;
      }
      
      // optional uint32 drawId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drawId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drawid_)));
          set_has_drawid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestDrawPrize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->userid(), output);
  }
  
  // optional uint32 drawId = 2;
  if (has_drawid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->drawid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestDrawPrize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 userId = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->userid(), target);
  }
  
  // optional uint32 drawId = 2;
  if (has_drawid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->drawid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestDrawPrize::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userid());
    }
    
    // optional uint32 drawId = 2;
    if (has_drawid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drawid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestDrawPrize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestDrawPrize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestDrawPrize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestDrawPrize::MergeFrom(const RequestDrawPrize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_drawid()) {
      set_drawid(from.drawid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestDrawPrize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestDrawPrize::CopyFrom(const RequestDrawPrize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestDrawPrize::IsInitialized() const {
  
  return true;
}

void RequestDrawPrize::Swap(RequestDrawPrize* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(drawid_, other->drawid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestDrawPrize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestDrawPrize_descriptor_;
  metadata.reflection = RequestDrawPrize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PBDrawPrize::kPrizeIdFieldNumber;
const int PBDrawPrize::kPrizeNumFieldNumber;
#endif  // !_MSC_VER

PBDrawPrize::PBDrawPrize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PBDrawPrize::InitAsDefaultInstance() {
}

PBDrawPrize::PBDrawPrize(const PBDrawPrize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PBDrawPrize::SharedCtor() {
  _cached_size_ = 0;
  prizeid_ = 0u;
  prizenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PBDrawPrize::~PBDrawPrize() {
  SharedDtor();
}

void PBDrawPrize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PBDrawPrize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBDrawPrize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PBDrawPrize_descriptor_;
}

const PBDrawPrize& PBDrawPrize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eproto();  return *default_instance_;
}

PBDrawPrize* PBDrawPrize::default_instance_ = NULL;

PBDrawPrize* PBDrawPrize::New() const {
  return new PBDrawPrize;
}

void PBDrawPrize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prizeid_ = 0u;
    prizenum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PBDrawPrize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 prizeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prizeid_)));
          set_has_prizeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_prizeNum;
        break;
      }
      
      // optional uint32 prizeNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prizeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prizenum_)));
          set_has_prizenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PBDrawPrize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 prizeId = 1;
  if (has_prizeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prizeid(), output);
  }
  
  // optional uint32 prizeNum = 2;
  if (has_prizenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->prizenum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PBDrawPrize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 prizeId = 1;
  if (has_prizeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->prizeid(), target);
  }
  
  // optional uint32 prizeNum = 2;
  if (has_prizenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->prizenum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PBDrawPrize::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 prizeId = 1;
    if (has_prizeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prizeid());
    }
    
    // optional uint32 prizeNum = 2;
    if (has_prizenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prizenum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBDrawPrize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PBDrawPrize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PBDrawPrize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PBDrawPrize::MergeFrom(const PBDrawPrize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prizeid()) {
      set_prizeid(from.prizeid());
    }
    if (from.has_prizenum()) {
      set_prizenum(from.prizenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PBDrawPrize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBDrawPrize::CopyFrom(const PBDrawPrize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBDrawPrize::IsInitialized() const {
  
  return true;
}

void PBDrawPrize::Swap(PBDrawPrize* other) {
  if (other != this) {
    std::swap(prizeid_, other->prizeid_);
    std::swap(prizenum_, other->prizenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PBDrawPrize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PBDrawPrize_descriptor_;
  metadata.reflection = PBDrawPrize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseDrawPrize::kErrCodeFieldNumber;
const int ResponseDrawPrize::kPrizeListFieldNumber;
#endif  // !_MSC_VER

ResponseDrawPrize::ResponseDrawPrize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseDrawPrize::InitAsDefaultInstance() {
}

ResponseDrawPrize::ResponseDrawPrize(const ResponseDrawPrize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseDrawPrize::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseDrawPrize::~ResponseDrawPrize() {
  SharedDtor();
}

void ResponseDrawPrize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseDrawPrize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseDrawPrize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseDrawPrize_descriptor_;
}

const ResponseDrawPrize& ResponseDrawPrize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_2eproto();  return *default_instance_;
}

ResponseDrawPrize* ResponseDrawPrize::default_instance_ = NULL;

ResponseDrawPrize* ResponseDrawPrize::New() const {
  return new ResponseDrawPrize;
}

void ResponseDrawPrize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  prizelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseDrawPrize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 errCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prizeList;
        break;
      }
      
      // repeated .ctos.PBDrawPrize prizeList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prizeList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prizelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prizeList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseDrawPrize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 errCode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errcode(), output);
  }
  
  // repeated .ctos.PBDrawPrize prizeList = 2;
  for (int i = 0; i < this->prizelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->prizelist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseDrawPrize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 errCode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  // repeated .ctos.PBDrawPrize prizeList = 2;
  for (int i = 0; i < this->prizelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->prizelist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseDrawPrize::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 errCode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }
    
  }
  // repeated .ctos.PBDrawPrize prizeList = 2;
  total_size += 1 * this->prizelist_size();
  for (int i = 0; i < this->prizelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prizelist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseDrawPrize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseDrawPrize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseDrawPrize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseDrawPrize::MergeFrom(const ResponseDrawPrize& from) {
  GOOGLE_CHECK_NE(&from, this);
  prizelist_.MergeFrom(from.prizelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseDrawPrize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseDrawPrize::CopyFrom(const ResponseDrawPrize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseDrawPrize::IsInitialized() const {
  
  return true;
}

void ResponseDrawPrize::Swap(ResponseDrawPrize* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    prizelist_.Swap(&other->prizelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseDrawPrize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseDrawPrize_descriptor_;
  metadata.reflection = ResponseDrawPrize_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ctos

// @@protoc_insertion_point(global_scope)
