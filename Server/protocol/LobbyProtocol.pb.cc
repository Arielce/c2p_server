// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LobbyProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lobby {

namespace {

const ::google::protobuf::Descriptor* RequestRegGameServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestRegGameServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseRegGameServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseRegGameServer_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_LobbyProtocol_2eproto() {
  protobuf_AddDesc_LobbyProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LobbyProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  RequestRegGameServer_descriptor_ = file->message_type(0);
  static const int RequestRegGameServer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegGameServer, gsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegGameServer, gstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegGameServer, port_),
  };
  RequestRegGameServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestRegGameServer_descriptor_,
      RequestRegGameServer::default_instance_,
      RequestRegGameServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegGameServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRegGameServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestRegGameServer));
  ResponseRegGameServer_descriptor_ = file->message_type(1);
  static const int ResponseRegGameServer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRegGameServer, errcode_),
  };
  ResponseRegGameServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResponseRegGameServer_descriptor_,
      ResponseRegGameServer::default_instance_,
      ResponseRegGameServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRegGameServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRegGameServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResponseRegGameServer));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LobbyProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestRegGameServer_descriptor_, &RequestRegGameServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResponseRegGameServer_descriptor_, &ResponseRegGameServer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LobbyProtocol_2eproto() {
  delete RequestRegGameServer::default_instance_;
  delete RequestRegGameServer_reflection_;
  delete ResponseRegGameServer::default_instance_;
  delete ResponseRegGameServer_reflection_;
}

void protobuf_AddDesc_LobbyProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023LobbyProtocol.proto\022\005lobby\"B\n\024RequestR"
    "egGameServer\022\014\n\004gsId\030\001 \001(\r\022\016\n\006gsType\030\002 \001"
    "(\r\022\014\n\004port\030\003 \001(\r\"(\n\025ResponseRegGameServe"
    "r\022\017\n\007errCode\030\001 \001(\r", 138);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LobbyProtocol.proto", &protobuf_RegisterTypes);
  RequestRegGameServer::default_instance_ = new RequestRegGameServer();
  ResponseRegGameServer::default_instance_ = new ResponseRegGameServer();
  RequestRegGameServer::default_instance_->InitAsDefaultInstance();
  ResponseRegGameServer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LobbyProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LobbyProtocol_2eproto {
  StaticDescriptorInitializer_LobbyProtocol_2eproto() {
    protobuf_AddDesc_LobbyProtocol_2eproto();
  }
} static_descriptor_initializer_LobbyProtocol_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RequestRegGameServer::kGsIdFieldNumber;
const int RequestRegGameServer::kGsTypeFieldNumber;
const int RequestRegGameServer::kPortFieldNumber;
#endif  // !_MSC_VER

RequestRegGameServer::RequestRegGameServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestRegGameServer::InitAsDefaultInstance() {
}

RequestRegGameServer::RequestRegGameServer(const RequestRegGameServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestRegGameServer::SharedCtor() {
  _cached_size_ = 0;
  gsid_ = 0u;
  gstype_ = 0u;
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRegGameServer::~RequestRegGameServer() {
  SharedDtor();
}

void RequestRegGameServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestRegGameServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestRegGameServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestRegGameServer_descriptor_;
}

const RequestRegGameServer& RequestRegGameServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LobbyProtocol_2eproto();  return *default_instance_;
}

RequestRegGameServer* RequestRegGameServer::default_instance_ = NULL;

RequestRegGameServer* RequestRegGameServer::New() const {
  return new RequestRegGameServer;
}

void RequestRegGameServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gsid_ = 0u;
    gstype_ = 0u;
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestRegGameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gsId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gsid_)));
          set_has_gsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gsType;
        break;
      }
      
      // optional uint32 gsType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gsType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gstype_)));
          set_has_gstype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }
      
      // optional uint32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestRegGameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 gsId = 1;
  if (has_gsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gsid(), output);
  }
  
  // optional uint32 gsType = 2;
  if (has_gstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gstype(), output);
  }
  
  // optional uint32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestRegGameServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 gsId = 1;
  if (has_gsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gsid(), target);
  }
  
  // optional uint32 gsType = 2;
  if (has_gstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gstype(), target);
  }
  
  // optional uint32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestRegGameServer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gsId = 1;
    if (has_gsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gsid());
    }
    
    // optional uint32 gsType = 2;
    if (has_gstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gstype());
    }
    
    // optional uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRegGameServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestRegGameServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestRegGameServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestRegGameServer::MergeFrom(const RequestRegGameServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gsid()) {
      set_gsid(from.gsid());
    }
    if (from.has_gstype()) {
      set_gstype(from.gstype());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestRegGameServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRegGameServer::CopyFrom(const RequestRegGameServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRegGameServer::IsInitialized() const {
  
  return true;
}

void RequestRegGameServer::Swap(RequestRegGameServer* other) {
  if (other != this) {
    std::swap(gsid_, other->gsid_);
    std::swap(gstype_, other->gstype_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestRegGameServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestRegGameServer_descriptor_;
  metadata.reflection = RequestRegGameServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResponseRegGameServer::kErrCodeFieldNumber;
#endif  // !_MSC_VER

ResponseRegGameServer::ResponseRegGameServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResponseRegGameServer::InitAsDefaultInstance() {
}

ResponseRegGameServer::ResponseRegGameServer(const ResponseRegGameServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResponseRegGameServer::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseRegGameServer::~ResponseRegGameServer() {
  SharedDtor();
}

void ResponseRegGameServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseRegGameServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseRegGameServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseRegGameServer_descriptor_;
}

const ResponseRegGameServer& ResponseRegGameServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LobbyProtocol_2eproto();  return *default_instance_;
}

ResponseRegGameServer* ResponseRegGameServer::default_instance_ = NULL;

ResponseRegGameServer* ResponseRegGameServer::New() const {
  return new ResponseRegGameServer;
}

void ResponseRegGameServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResponseRegGameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 errCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResponseRegGameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 errCode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResponseRegGameServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 errCode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResponseRegGameServer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 errCode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseRegGameServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResponseRegGameServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResponseRegGameServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResponseRegGameServer::MergeFrom(const ResponseRegGameServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResponseRegGameServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseRegGameServer::CopyFrom(const ResponseRegGameServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseRegGameServer::IsInitialized() const {
  
  return true;
}

void ResponseRegGameServer::Swap(ResponseRegGameServer* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResponseRegGameServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseRegGameServer_descriptor_;
  metadata.reflection = ResponseRegGameServer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace lobby

// @@protoc_insertion_point(global_scope)
