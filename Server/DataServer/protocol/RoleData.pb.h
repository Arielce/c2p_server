// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RoleData.proto

#ifndef PROTOBUF_RoleData_2eproto__INCLUDED
#define PROTOBUF_RoleData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace roledata {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RoleData_2eproto();
void protobuf_AssignDesc_RoleData_2eproto();
void protobuf_ShutdownFile_RoleData_2eproto();

class PBRoleBaseInfo;

// ===================================================================

class PBRoleBaseInfo : public ::google::protobuf::Message {
 public:
  PBRoleBaseInfo();
  virtual ~PBRoleBaseInfo();
  
  PBRoleBaseInfo(const PBRoleBaseInfo& from);
  
  inline PBRoleBaseInfo& operator=(const PBRoleBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBRoleBaseInfo& default_instance();
  
  void Swap(PBRoleBaseInfo* other);
  
  // implements Message ----------------------------------------------
  
  PBRoleBaseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBRoleBaseInfo& from);
  void MergeFrom(const PBRoleBaseInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 userId = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 userid() const;
  inline void set_userid(::google::protobuf::uint32 value);
  
  // optional string roleName = 2;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  
  // optional string ptName = 3;
  inline bool has_ptname() const;
  inline void clear_ptname();
  static const int kPtNameFieldNumber = 3;
  inline const ::std::string& ptname() const;
  inline void set_ptname(const ::std::string& value);
  inline void set_ptname(const char* value);
  inline void set_ptname(const char* value, size_t size);
  inline ::std::string* mutable_ptname();
  inline ::std::string* release_ptname();
  
  // optional uint32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);
  
  // optional uint32 exp = 5;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 5;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);
  
  // optional uint32 diamond = 6;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 6;
  inline ::google::protobuf::uint32 diamond() const;
  inline void set_diamond(::google::protobuf::uint32 value);
  
  // optional uint32 gold = 7;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 7;
  inline ::google::protobuf::uint32 gold() const;
  inline void set_gold(::google::protobuf::uint32 value);
  
  // optional uint32 vipLevel = 8;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kVipLevelFieldNumber = 8;
  inline ::google::protobuf::uint32 viplevel() const;
  inline void set_viplevel(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:roledata.PBRoleBaseInfo)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_ptname();
  inline void clear_has_ptname();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_diamond();
  inline void clear_has_diamond();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* rolename_;
  ::google::protobuf::uint32 userid_;
  ::google::protobuf::uint32 level_;
  ::std::string* ptname_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 diamond_;
  ::google::protobuf::uint32 gold_;
  ::google::protobuf::uint32 viplevel_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_RoleData_2eproto();
  friend void protobuf_AssignDesc_RoleData_2eproto();
  friend void protobuf_ShutdownFile_RoleData_2eproto();
  
  void InitAsDefaultInstance();
  static PBRoleBaseInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// PBRoleBaseInfo

// optional uint32 userId = 1;
inline bool PBRoleBaseInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBRoleBaseInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBRoleBaseInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBRoleBaseInfo::clear_userid() {
  userid_ = 0u;
  clear_has_userid();
}
inline ::google::protobuf::uint32 PBRoleBaseInfo::userid() const {
  return userid_;
}
inline void PBRoleBaseInfo::set_userid(::google::protobuf::uint32 value) {
  set_has_userid();
  userid_ = value;
}

// optional string roleName = 2;
inline bool PBRoleBaseInfo::has_rolename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBRoleBaseInfo::set_has_rolename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBRoleBaseInfo::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBRoleBaseInfo::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& PBRoleBaseInfo::rolename() const {
  return *rolename_;
}
inline void PBRoleBaseInfo::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void PBRoleBaseInfo::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void PBRoleBaseInfo::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBRoleBaseInfo::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* PBRoleBaseInfo::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string ptName = 3;
inline bool PBRoleBaseInfo::has_ptname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBRoleBaseInfo::set_has_ptname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBRoleBaseInfo::clear_has_ptname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBRoleBaseInfo::clear_ptname() {
  if (ptname_ != &::google::protobuf::internal::kEmptyString) {
    ptname_->clear();
  }
  clear_has_ptname();
}
inline const ::std::string& PBRoleBaseInfo::ptname() const {
  return *ptname_;
}
inline void PBRoleBaseInfo::set_ptname(const ::std::string& value) {
  set_has_ptname();
  if (ptname_ == &::google::protobuf::internal::kEmptyString) {
    ptname_ = new ::std::string;
  }
  ptname_->assign(value);
}
inline void PBRoleBaseInfo::set_ptname(const char* value) {
  set_has_ptname();
  if (ptname_ == &::google::protobuf::internal::kEmptyString) {
    ptname_ = new ::std::string;
  }
  ptname_->assign(value);
}
inline void PBRoleBaseInfo::set_ptname(const char* value, size_t size) {
  set_has_ptname();
  if (ptname_ == &::google::protobuf::internal::kEmptyString) {
    ptname_ = new ::std::string;
  }
  ptname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBRoleBaseInfo::mutable_ptname() {
  set_has_ptname();
  if (ptname_ == &::google::protobuf::internal::kEmptyString) {
    ptname_ = new ::std::string;
  }
  return ptname_;
}
inline ::std::string* PBRoleBaseInfo::release_ptname() {
  clear_has_ptname();
  if (ptname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ptname_;
    ptname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 level = 4;
inline bool PBRoleBaseInfo::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PBRoleBaseInfo::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PBRoleBaseInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PBRoleBaseInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 PBRoleBaseInfo::level() const {
  return level_;
}
inline void PBRoleBaseInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 exp = 5;
inline bool PBRoleBaseInfo::has_exp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PBRoleBaseInfo::set_has_exp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PBRoleBaseInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PBRoleBaseInfo::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 PBRoleBaseInfo::exp() const {
  return exp_;
}
inline void PBRoleBaseInfo::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional uint32 diamond = 6;
inline bool PBRoleBaseInfo::has_diamond() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PBRoleBaseInfo::set_has_diamond() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PBRoleBaseInfo::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PBRoleBaseInfo::clear_diamond() {
  diamond_ = 0u;
  clear_has_diamond();
}
inline ::google::protobuf::uint32 PBRoleBaseInfo::diamond() const {
  return diamond_;
}
inline void PBRoleBaseInfo::set_diamond(::google::protobuf::uint32 value) {
  set_has_diamond();
  diamond_ = value;
}

// optional uint32 gold = 7;
inline bool PBRoleBaseInfo::has_gold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PBRoleBaseInfo::set_has_gold() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PBRoleBaseInfo::clear_has_gold() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PBRoleBaseInfo::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
inline ::google::protobuf::uint32 PBRoleBaseInfo::gold() const {
  return gold_;
}
inline void PBRoleBaseInfo::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
}

// optional uint32 vipLevel = 8;
inline bool PBRoleBaseInfo::has_viplevel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PBRoleBaseInfo::set_has_viplevel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PBRoleBaseInfo::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PBRoleBaseInfo::clear_viplevel() {
  viplevel_ = 0u;
  clear_has_viplevel();
}
inline ::google::protobuf::uint32 PBRoleBaseInfo::viplevel() const {
  return viplevel_;
}
inline void PBRoleBaseInfo::set_viplevel(::google::protobuf::uint32 value) {
  set_has_viplevel();
  viplevel_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace roledata

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RoleData_2eproto__INCLUDED
